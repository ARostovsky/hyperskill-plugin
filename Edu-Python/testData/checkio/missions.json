{
  "objects": [
    {
      "languages": [
        "en",
        "ja",
        "ru",
        "zh-hans"
      ],
      "code": "from typing import List, Any\r\n\r\n\r\ndef all_the_same(elements: List[Any]) -> bool:\r\n    # your code here\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(all_the_same([1, 1, 1]))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert all_the_same([1, 1, 1]) == True\r\n    assert all_the_same([1, 2, 1]) == False\r\n    assert all_the_same(['a', 'a', 'a']) == True\r\n    assert all_the_same([]) == True\r\n    assert all_the_same([1]) == True\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    In this mission you should check if all elements in the given list are equal.\n</p>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> List.\n</p>\n\n<p>\n    <strong>Output: </strong> Bool. \n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">\nall_the_same([1, 1, 1]) == True\nall_the_same([1, 2, 1]) == False\nall_the_same(['a', 'a', 'a']) == True\nall_the_same([]) == True\n</pre>\n\n</div>\n<p><i>The idea for this mission was found on <a href=\"https://dbader.org/\">Python Tricks series by Dan Bader</a></i></p>\n<!-- Here you can explain how it can be used in development and what is usage of this. -->\n<!-- The section is optional -->\n\n\n\n<p>\n    <strong>Precondition:</strong>\n    <i>all elements of the input list are hashable</i>\n</p>\n",
      "title": "All the Same",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 520,
      "initialCode": "from typing import List, Any\r\n\r\n\r\ndef all_the_same(elements: List[Any]) -> bool:\r\n    # your code here\r\n    return True\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(all_the_same([1, 1, 1]))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert all_the_same([1, 1, 1]) == True\r\n    assert all_the_same([1, 2, 1]) == False\r\n    assert all_the_same(['a', 'a', 'a']) == True\r\n    assert all_the_same([]) == True\r\n    assert all_the_same([1]) == True\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "all-the-same"
    },
    {
      "languages": [
        "hu",
        "en",
        "el",
        "es",
        "fr",
        "ja",
        "ko",
        "pt-br",
        "ru",
        "uk",
        "zh-hans"
      ],
      "code": "def checkio(data: str) -> bool:\n\n    #replace this for solution\n    return True or False\n\n#Some hints\n#Just check all conditions\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert checkio('A1213pokl') == False, \"1st example\"\n    assert checkio('bAse730onE4') == True, \"2nd example\"\n    assert checkio('asasasasasasasaas') == False, \"3rd example\"\n    assert checkio('QWERTYqwerty') == False, \"4th example\"\n    assert checkio('123456123456') == False, \"5th example\"\n    assert checkio('QwErTy911poqqqq') == True, \"6th example\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" src=\"https://py-static.checkio.org/media/task/media/bbf378a0bdb1406599f44f1de07b07e6/house_password_v1_400.png\" style=\"max-height: 400px; float: left\">\n\n<p>\n    Stephan and Sophia forget about security and use simple passwords for everything.\n    Help Nikola develop a password security check module.\n    The password will be considered strong enough if its length is greater than or equal to 10 symbols,\n    it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it.\n    The password contains only ASCII latin letters or digits.\n</p>\n\n<p><strong>Input: </strong>A password as a string.</p>\n<p><strong>Output: </strong> Is the password safe or not as a boolean or any data type that can be\n    converted and processed as a boolean. In the results you will see the converted results.</p>\n\n<p class=\"for_info_only\">\n<strong>Example:</strong>\n\n<pre class=\"brush: python\">checkio('A1213pokl') == False\ncheckio('bAse730onE') == True\ncheckio('asasasasasasasaas') == False\ncheckio('QWERTYqwerty') == False\ncheckio('123456123456') == False\ncheckio('QwErTy911poqqqq') == True\n</pre>\n\n</p>\n\n<br>\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    If you are worried about the security of your app or service, you can check your users' passwords for complexity.\n    You can use these skills to require that your users passwords meet more conditions (punctuations or unicode).\n</p>\n\n<p><strong>Precondition</strong>:<br>\n    re.match(\"[a-zA-Z0-9]+\", password)<br>\n    0 &lt; len(password) &le; 64\n",
      "title": "House Password",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 85,
      "initialCode": "def checkio(data: str) -> bool:\n\n    #replace this for solution\n    return True or False\n\n#Some hints\n#Just check all conditions\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert checkio('A1213pokl') == False, \"1st example\"\n    assert checkio('bAse730onE4') == True, \"2nd example\"\n    assert checkio('asasasasasasasaas') == False, \"3rd example\"\n    assert checkio('QWERTYqwerty') == False, \"4th example\"\n    assert checkio('123456123456') == False, \"5th example\"\n    assert checkio('QwErTy911poqqqq') == True, \"6th example\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "house-password"
    },
    {
      "languages": [
        "zh-hans",
        "en",
        "de",
        "el",
        "es",
        "fr",
        "hu",
        "ja",
        "pl",
        "pt-br",
        "ru",
        "uk"
      ],
      "code": "def checkio(text: str) -> str:\r\n\r\n    #replace this for solution\r\n    return 'a'\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(checkio(\"Hello World!\"))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert checkio(\"Hello World!\") == \"l\", \"Hello test\"\r\n    assert checkio(\"How do you do?\") == \"o\", \"O is most wanted\"\r\n    assert checkio(\"One\") == \"e\", \"All letter only once.\"\r\n    assert checkio(\"Oops!\") == \"o\", \"Don't forget about lower case.\"\r\n    assert checkio(\"AAaooo!!!!\") == \"a\", \"Only letters.\"\r\n    assert checkio(\"abe\") == \"a\", \"The First.\"\r\n    print(\"Start the long test\")\r\n    assert checkio(\"a\" * 9000 + \"b\" * 1000) == \"a\", \"Long.\"\r\n    print(\"The local tests are done.\")",
      "description": "<div style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/0a271e6be5594c78919b29d4c0e58145/title.png\" style=\"max-height: 350px\">\n</div>\n<p>\n    You are given a text, which contains different english letters and punctuation symbols.\n    You should find the most frequent letter in the text. The letter returned must be in lower case.<br>\n    While checking for the most wanted letter, casing does not matter, so for the purpose of your search,\n    \"A\"&nbsp;==&nbsp;\"a\".\n    Make sure you do not count punctuation symbols, digits and whitespaces, only letters.\n</p>\n<p>\n    If you have <strong>two or more letters with the same frequency</strong>,\n    then return the letter which comes first in the latin alphabet.\n    For example -- \"one\" contains \"o\", \"n\", \"e\" only once for each, thus we choose \"e\".\n</p>\n\n\n<p>\n    <strong>Input: </strong> A text for analysis as a string.\n</p>\n\n<p>\n    <strong>Output: </strong> The most frequent letter in lower case as a string.\n</p>\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio(\"Hello World!\") == \"l\"\ncheckio(\"How do you do?\") == \"o\"\ncheckio(\"One\") == \"e\"\ncheckio(\"Oops!\") == \"o\"\ncheckio(\"AAaooo!!!!\") == \"a\"\ncheckio(\"abe\") == \"a\"\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    For most decryption tasks you need to know the frequency of occurrence for various letters in a section of text.\n    For example: we can easily crack a simple addition or substitution cipher if we know the frequency in which letters appear.\n    This is interesting stuff for language experts!\n</p>\n\n\n<p><strong>Precondition</strong>:<br>\n    A text contains only ASCII symbols.<br>\n    0 &lt; len(text) &le; 10<sup>5</sup>\n</p>\n\n<!--\n<p class=\"for_info_only\">\n    <strong>How to use TryIt: </strong><br>\n    <iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/yJUA5qN898E\" frameborder=\"0\" allowfullscreen></iframe>\n</p>\n-->\n",
      "title": "The Most Wanted Letter",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 218,
      "initialCode": "def checkio(text: str) -> str:\r\n\r\n    #replace this for solution\r\n    return 'a'\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(checkio(\"Hello World!\"))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert checkio(\"Hello World!\") == \"l\", \"Hello test\"\r\n    assert checkio(\"How do you do?\") == \"o\", \"O is most wanted\"\r\n    assert checkio(\"One\") == \"e\", \"All letter only once.\"\r\n    assert checkio(\"Oops!\") == \"o\", \"Don't forget about lower case.\"\r\n    assert checkio(\"AAaooo!!!!\") == \"a\", \"Only letters.\"\r\n    assert checkio(\"abe\") == \"a\", \"The First.\"\r\n    print(\"Start the long test\")\r\n    assert checkio(\"a\" * 9000 + \"b\" * 1000) == \"a\", \"Long.\"\r\n    print(\"The local tests are done.\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "most-wanted-letter"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def time_converter(time):\r\n    #replace this for solution\r\n    return time\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(time_converter('12:30'))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert time_converter('12:30') == '12:30 p.m.'\r\n    assert time_converter('09:00') == '9:00 a.m.'\r\n    assert time_converter('23:15') == '11:15 p.m.'\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    You prefer a good old 12-hour time format. But the modern world we live in would rather use the 24-hour format and you see it everywhere. Your task is to convert the time from the 24-h format into 12-h format by following the next rules:<br>\n- the output format should be 'hh:mm a.m.' (for hours before midday) or 'hh:mm p.m.' (for hours after midday)<br>\n- if hours is less than 10 - don't write a '0' before it. For example: '9:05 a.m.'<br>\n\nHere you can find some useful information about the <a href='https://en.wikipedia.org/wiki/12-hour_clock'>12-hour format</a>.\n</p>\n\n\n<p style=\"text-align: center;\">\n    <img  title=\"Time\" src=\"https://py-static.checkio.org/media/task/media/d755e36637094c5384367b15852d9143/time.png\" alt=\"example\" style=\"max-height: 220px\"/>\n</p>\n\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> Time in a 24-hour format (as a string).\n</p>\n\n<p>\n    <strong>Output: </strong> Time in a 12-hour format (as a string). \n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n<p>\n<strong>Example:</strong>\n</p>\n\n<pre class=\"brush: python\">time_converter('12:30') == '12:30 p.m.'\ntime_converter('09:00') == '9:00 a.m.'\ntime_converter('23:15') == '11:15 p.m.'\n</pre>\n\n</div>\n\n<!-- Here you can explain how it can be used in development and what is usage of this. -->\n<!-- The section is optional -->\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    For work with the different time formats.\n</p>\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p><strong>Precondition</strong>:<br>\n    '00:00' <= time <= '23:59'\n</p>\n",
      "title": "Time Converter (24h to 12h)",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 546,
      "initialCode": "def time_converter(time):\r\n    #replace this for solution\r\n    return time\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(time_converter('12:30'))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert time_converter('12:30') == '12:30 p.m.'\r\n    assert time_converter('09:00') == '9:00 a.m.'\r\n    assert time_converter('23:15') == '11:15 p.m.'\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "time-converter-24h-to-12h"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "es",
        "fr",
        "hu",
        "ja",
        "ko",
        "pt-br",
        "ru",
        "uk",
        "zh-hans"
      ],
      "code": "#Your optional code here\n#You can import some modules or create additional functions\n\n\ndef checkio(data: list) -> list:\n    #Your code here\n    #It's main function. Don't remove this function\n    #It's used for auto-testing and must return a result for check.  \n\n    #replace this for solution\n    return data\n\n#Some hints\n#You can use list.count(element) method for counting.\n#Create new list with non-unique elements\n#Loop over original list\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], \"1st example\"\n    assert list(checkio([1, 2, 3, 4, 5])) == [], \"2nd example\"\n    assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], \"3rd example\"\n    assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], \"4th example\"\n    print(\"It is all good. Let's check it now\")\n",
      "description": "<div class=\"story\">\n    <div style=\"text-align: center\">\n        <img src=\"https://py-static.checkio.org/media/task/media/115c9e71decd4329a8df694808fa74d0/robots.png\" style=\"max-height: 350px\">\n    </div>\n    <p>\n        If you have 50 different plug types, appliances wouldn't be available and would be very\n        expensive. But once an electric outlet becomes standardized, many companies can design\n        appliances, and competition ensues, creating variety and better prices for consumers.\n        <br>\n        -- Bill Gates\n\n    </p>\n\n</div>\n\n<p>\n    You are given a non-empty list of integers (X).\n    For this task, you should return a list consisting of only the non-unique elements in this list.\n    To do so you will need to remove all unique elements (elements which are contained in a given\n    list only once).\n    When solving this task, do not change the order of the list.\n    Example: [1, 2, 3, 1, 3] 1 and 3 non-unique elements and result will be [1, 3, 1, 3].\n\n</p>\n\n<p style=\"text-align: center;\">\n    <img title=\"non-unique-elements\"\n         src=\"https://py-static.checkio.org/media/task/media/115c9e71decd4329a8df694808fa74d0/non-unique-elements.png\"\n         alt=\"non-unique-elements\"\n         style=\"max-height: 160px\"/>\n</p>\n\n<p><strong>Input: </strong>A list of integers.</p>\n\n<p><strong>Output: </strong>An iterable of integers.</p>\n<div class=\"for_info_only\">\n    <p><strong>Example:</strong></p>\n<pre class=\"brush: python\">\ncheckio([1, 2, 3, 1, 3]) == [1, 3, 1, 3]\ncheckio([1, 2, 3, 4, 5]) == []\ncheckio([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\ncheckio([10, 9, 10, 10, 9, 8]) == [10, 9, 10, 10, 9]\n</pre>\n</div>\n<br>\n<p>\n    <strong>How it is used:</strong>\n    This mission will help you to understand how to manipulate arrays,\n    something that is the basis for solving more complex tasks.\n    The concept can be easily generalized for real world tasks.\n    For example: if you need to clarify statistics by removing low frequency elements (noise).\n\n</p>\n\n<p>\n    \n    You can find out more about Python arrays in <a href=\"https://py.checkio.org/blog/arrays-for-python/\">one of our articles featuring lists, tuples, array.array and numpy.array</a>. \n    \n\n</p>\n\n<p><strong>Precondition:</strong><br>\n    0 &lt; len(data) &lt; 1000<br>\n</p>\n\n",
      "title": "Non-unique Elements",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 179,
      "initialCode": "#Your optional code here\n#You can import some modules or create additional functions\n\n\ndef checkio(data: list) -> list:\n    #Your code here\n    #It's main function. Don't remove this function\n    #It's used for auto-testing and must return a result for check.  \n\n    #replace this for solution\n    return data\n\n#Some hints\n#You can use list.count(element) method for counting.\n#Create new list with non-unique elements\n#Loop over original list\n\n\nif __name__ == \"__main__\":\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], \"1st example\"\n    assert list(checkio([1, 2, 3, 4, 5])) == [], \"2nd example\"\n    assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], \"3rd example\"\n    assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], \"4th example\"\n    print(\"It is all good. Let's check it now\")\n",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "non-unique-elements"
    },
    {
      "languages": [
        "en"
      ],
      "code": "def frequency_sort(items):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]\n    assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']\n    assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]\n    assert list(frequency_sort([])) == []\n    assert list(frequency_sort([1])) == [1]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "description": "<!-- Describe task in general -->\n\n<p>\n    Sort the given iterable so that its elements end up in the decreasing frequency order, that is, the number of times they appear in elements. If two elements have the same frequency, they should end up in the same order as the first appearance in the iterable.\n</p>\n\n\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> Iterable\n</p>\n\n<p>\n    <strong>Output: </strong> Iterable\n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]) == [4, 4, 4, 4, 6, 6, 2, 2]\nfrequency_sort(['bob', 'bob', 'carl', 'alex', 'bob']) == ['bob', 'bob', 'bob', 'carl', 'alex']\n</pre>\n\n</div>\n\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p>\n    <strong>Precondition:</strong>\n    <i>elements can be ints or strings</i>\n</p>\n\n\n<p><i>The mission was taken from Python CCPS 109 Fall 2018. It's being taught for Ryerson Chang School of Continuing Education by <a href=\"http://www.scs.ryerson.ca/~ikokkari/\">Ilkka Kokkarinen</a></i></p>\n\n\n",
      "title": "Sort Array by Element Frequency",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 610,
      "initialCode": "def frequency_sort(items):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]\n    assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']\n    assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]\n    assert list(frequency_sort([])) == []\n    assert list(frequency_sort([1])) == [1]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "sort-array-by-element-frequency"
    },
    {
      "languages": [
        "en",
        "hu",
        "ru"
      ],
      "code": "def flat_list(array):\r\n    return array\r\n\r\nif __name__ == '__main__':\r\n    assert flat_list([1, 2, 3]) == [1, 2, 3], \"First\"\r\n    assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], \"Second\"\r\n    assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], \"Third\"\r\n    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], \"Four\"\r\n    print('Done! Check it')",
      "description": "<img class=\"for_info_only half\" src=\"https://py-static.checkio.org/media/task/media/ef2a9e6360bd4ec7806b2451d7d6a742/title.png\" style=\"float:left;max-height: 400px\">\n<p>\n    Nicola likes to categorize all sorts of things.\n    He categorized a series of numbers and as the result of his efforts,\n    a simple sequence of numbers became a deeply-nested list.\n    Sophia and Stephan don't really understand his organization and need to figure out what it all means.\n    They need your help to understand Nikolas crazy list.\n</p>\n<p>\n    There is a list which contains integers or\n    other nested lists which may contain yet more lists and integers which then\u2026 you get the idea.\n    You should put all of the integer values into one flat list.\n    The order should be as it was in the original list with string representation from left to right.\n</p>\n\n<p>\n    We need to hide this program from Nikola by keeping it small and easy to hide.\n    Because of this, <strong>your code should be shorter than 140 characters (with whitespaces)</strong>.\n</p>\n\n<p><strong>Input data:</strong> A nested list with integers.</p>\n\n<p><strong>Output data:</strong> The one-dimensional list with integers.</p>\n\n<p><strong>Example:<br/></strong></p>\n\n\n<pre class=\"brush: python\">flat_list([1, 2, 3]) == [1, 2, 3]\nflat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]\nflat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7]\nflat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]\n</pre>\n\n\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This concept is useful for parsing and analyzing files with complex structures and\n    the task challenges your creativity in writing short code.\n</p>\n\n<p>\n    <strong>Precondition: </strong> 0 &le; |array| &le; 100<br>\n    &forall; x \u2208 array : -2<sup>32</sup> < x < 2<sup>32</sup> or x is a list<br>\n    depth < 10\n</p>\n",
      "title": "Flatten a List",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 292,
      "initialCode": "def flat_list(array):\r\n    return array\r\n\r\nif __name__ == '__main__':\r\n    assert flat_list([1, 2, 3]) == [1, 2, 3], \"First\"\r\n    assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], \"Second\"\r\n    assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], \"Third\"\r\n    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], \"Four\"\r\n    print('Done! Check it')",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "flatten-list"
    },
    {
      "languages": [
        "en",
        "ru",
        "zh-hans"
      ],
      "code": "def long_repeat(line: str) -> int:\r\n    \"\"\"\r\n        length the longest substring that consists of the same char\r\n    \"\"\"\r\n    # your code here\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert long_repeat('sdsffffse') == 4, \"First\"\r\n    assert long_repeat('ddvvrwwwrggg') == 3, \"Second\"\r\n    assert long_repeat('abababaab') == 2, \"Third\"\r\n    assert long_repeat('') == 0, \"Empty\"\r\n    print('\"Run\" is good. How is \"Check\"?')",
      "description": "<p><i><a href=\"https://py.checkio.org/forum/post/11382/4-mission-ideas-substrings/\">There are four substring missions</a> that were born all in one day and you shouldn\u2019t need more than one day to solve them. All of these missions can be simply solved by brute force, but is it always the best way to go? (you might not have access to all of those missions yet, but they are going to be available with more opened islands on the map).</i></p>\n\n<p>\n    This mission is the first one of the series. Here you should find the length of the longest substring that consists of the same letter. For example, line \"aaabbcaaaa\" contains four substrings with the same letters \"aaa\", \"bb\",\"c\" and \"aaaa\". The last substring is the longest one, which makes it the answer.\n</p>\n\n\n<p>\n    <strong>Input: </strong> String.\n\n<p>\n    <strong>Output: </strong> Int. \n</p>\n\n<p style=\"text-align: center;\">\n    <img  title=\"Long repeat\" src=\"https://py-static.checkio.org/media/task/media/f63bebd0c36e451483a66d0d6866c923/drawing.png\" alt=\"example\" style=\"max-height: 80px\">\n</p>\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\nlong_repeat('sdsffffse') == 4\nlong_repeat('ddvvrwwwrggg') == 3\n</pre>\n</div>\n\n\n\n",
      "title": "Long Repeat",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 494,
      "initialCode": "def long_repeat(line: str) -> int:\r\n    \"\"\"\r\n        length the longest substring that consists of the same char\r\n    \"\"\"\r\n    # your code here\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert long_repeat('sdsffffse') == 4, \"First\"\r\n    assert long_repeat('ddvvrwwwrggg') == 3, \"Second\"\r\n    assert long_repeat('abababaab') == 2, \"Third\"\r\n    assert long_repeat('') == 0, \"Empty\"\r\n    print('\"Run\" is good. How is \"Check\"?')",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "long-repeat"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def sun_angle(time):\r\n    #replace this for solution\r\n    return time\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(sun_angle(\"07:00\"))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert sun_angle(\"07:00\") == 15\r\n    assert sun_angle(\"01:23\") == \"I don't see the sun!\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    Every true traveler must know how to do 3 things: fix the fire, find the water and extract useful information from the nature around him. Programming won't help you with the fire and water, but when it comes to the information extraction - it might be just the thing you need.\n</p>\n\n<p>\n    Your task is to find the angle of the sun above the horizon knowing the time of the day. Input data: the sun rises in the East at 6:00 AM, which corresponds to the angle of 0 degrees. At 12:00 PM the sun reaches its zenith, which means that the angle equals 90 degrees. 6:00 PM is the time of the sunset so the angle is 180 degrees. If the input will be the time of the night (before 6:00 AM or after 6:00 PM), your function should return - \"I don't see the sun!\".\n</p>\n\n\n<p style=\"text-align: center;\">\n    <img  title=\"Sun angle\" src=\"https://py-static.checkio.org/media/task/media/70b4ef56a4f948218c1c218f08f77063/sun.png\" alt=\"example\" style=\"max-height: 400px\">\n</p>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> The time of the day.\n</p>\n\n<p>\n    <strong>Output: </strong> The angle of the sun, rounded to 2 decimal places.\n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n<p>\n<strong>Example:</strong>\n</p>\n\n<pre class=\"brush: python\">sun_angle(\"07:00\") == 15\nsun_angle(\"12:15\"] == 93.75\nsun_angle(\"01:23\") == \"I don't see the sun!\"</pre>\n\n</div>\n\n<!-- Here you can explain how it can be used in development and what is usage of this. -->\n<!-- The section is optional -->\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    One day it can save your life, if you'll be lost far away from civilization.\n</p>\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p><strong>Precondition</strong>:<br>\n    00:00 <= time <= 23:59\n</p>\n",
      "title": "Sun Angle",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 539,
      "initialCode": "def sun_angle(time):\r\n    #replace this for solution\r\n    return time\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(sun_angle(\"07:00\"))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert sun_angle(\"07:00\") == 15\r\n    assert sun_angle(\"01:23\") == \"I don't see the sun!\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "sun-angle"
    },
    {
      "languages": [
        "ru",
        "en",
        "es"
      ],
      "code": "VOWELS = \"aeiouy\"\n\ndef translate(phrase):\n    return phrase\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(translate(\"hieeelalaooo\"))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert translate(\"hieeelalaooo\") == \"hello\", \"Hi!\"\n    assert translate(\"hoooowe yyyooouuu duoooiiine\") == \"how you doin\", \"Joey?\"\n    assert translate(\"aaa bo cy da eee fe\") == \"a b c d e f\", \"Alphabet\"\n    assert translate(\"sooooso aaaaaaaaa\") == \"sos aaa\", \"Mayday, mayday\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"byrd\" src=\"https://py-static.checkio.org/media/task/media/bcfc3641ec4e4b458251972088a4395b/byrd03.png\" alt=\"byrd\" style=\"float: left;\"/>\n\n<p>\n    Stephan has a friend who happens to be a little mechbird.\n    Recently, he was trying to teach it how to speak basic language.\n    Today the bird spoke its first word: \"hieeelalaooo\".\n    This sounds a lot like \"hello\", but with too many vowels.\n    Stephan asked Nikola for help and he helped to examine how the bird changes words.\n    With the information they discovered, we should help them to make a translation module.\n</p>\n\n<div>\n    The bird converts words by two rules:<br>\n<ul>\n    <li>- after each consonant letter the bird appends a random vowel letter (l \u21d2 la or le);</li>\n    <li>- after each vowel letter the bird appends two of the same letter (a \u21d2 aaa);</li>\n</ul>\n    <strong>Vowels letters == \"aeiouy\".</strong>\n</div>\n<br>\n<p>\n    You are given an ornithological phrase as several words which are separated by white-spaces\n    (each pair of words by one whitespace).\n    The bird does not know how to punctuate its phrases and only speaks words as letters.\n    All words are given in lowercase.\n    You should translate this phrase from the bird language to something more understandable.\n</p>\n\n<p>\n    <strong>Input: </strong> A bird phrase as a string.\n</p>\n\n<p>\n    <strong>Output: </strong> The translation as a string.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ntranslate(\"hieeelalaooo\") == \"hello\"\ntranslate(\"hoooowe yyyooouuu duoooiiine\") == \"how you doin\"\ntranslate(\"aaa bo cy da eee fe\") == \"a b c d e f\"\ntranslate(\"sooooso aaaaaaaaa\") == \"sos aaa\"\n    </pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This a similar cipher to those used by children when they invent their own \"bird\" language.\n    Now you will be ready to crack the code.\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    re.match(\"\\A([a-z]+\\ ?)+(?&lt;!\\ )\\Z\", phrase)<br>\n    A phrase always has the translation.\n</p>",
      "title": "Bird Language",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 326,
      "initialCode": "VOWELS = \"aeiouy\"\n\ndef translate(phrase):\n    return phrase\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(translate(\"hieeelalaooo\"))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert translate(\"hieeelalaooo\") == \"hello\", \"Hi!\"\n    assert translate(\"hoooowe yyyooouuu duoooiiine\") == \"how you doin\", \"Joey?\"\n    assert translate(\"aaa bo cy da eee fe\") == \"a b c d e f\", \"Alphabet\"\n    assert translate(\"sooooso aaaaaaaaa\") == \"sos aaa\", \"Mayday, mayday\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "bird-language"
    },
    {
      "languages": [
        "en",
        "de",
        "fr",
        "ja",
        "pt-br",
        "pt",
        "ru"
      ],
      "code": "def safe_pawns(pawns: set) -> int:\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert safe_pawns({\"b4\", \"d4\", \"f4\", \"c3\", \"e3\", \"g5\", \"d2\"}) == 6\r\n    assert safe_pawns({\"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"e5\"}) == 1\r\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")",
      "description": "<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/aea94b197081464ca1748e4562b8fbae/title.png\" style=\"max-height: 350px\">\n</div>\n<p>\n    Almost everyone in the world knows about the ancient game <a href=\"http://en.wikipedia.org/wiki/Chess\">Chess</a>\n    and has at least a basic understanding of its rules.\n    It has various units with a wide range of movement patterns allowing\n    for a huge number of possible different game positions (for example\n    <a href=\"http://oeis.org/A048987\">Number of possible chess games at the end of the n-th plies.</a>)\n    For this mission, we will examine the movements and behavior of chess pawns.\n\n</p>\n\n\n<p>\n    Chess is a two-player strategy game played on a checkered game board laid out in eight rows\n    (called ranks and denoted with numbers 1 to 8) and\n    eight columns (called files and denoted with letters a to h) of squares.\n    Each square of the chessboard is identified by a unique coordinate pair\n    \u2014 a letter and a number (ex, \"a1\", \"h8\", \"d6\").\n    For this mission we only need to concern ourselves with pawns.\n    A pawn may capture an opponent's piece on a square diagonally in front of it on an adjacent file,\n    by moving to that square. For white pawns the front squares are squares with greater row number \n    than the square they currently occupy.\n</p>\n\n<p>\n    A pawn is generally a weak unit, but we have 8 of them which we can use to build a pawn defense wall.\n    With this strategy, one pawn defends the others.\n    A pawn is safe if another pawn can capture a unit on that square.\n    We have several white pawns on the chess board and only white pawns.\n    You should design your code to find how many pawns are safe.\n</p>\n\n<p style=\"text-align: center;\">\n    <img class=\"for_info_only\" title=\"pawns\" src=\"https://py-static.checkio.org/media/task/media/aea94b197081464ca1748e4562b8fbae/pawns.png\" alt=\"pawns\" style=\"max-height:260px\"/>\n</p>\n\n<p>\n    You are given a set of square coordinates where we have placed white pawns.\n    You should count how many pawns are safe.\n</p>\n<p>\n    <strong>Input: </strong> Placed pawns coordinates as a set of strings.\n</p>\n\n<p>\n    <strong>Output: </strong> The number of safe pawns as a integer.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\nsafe_pawns({\"b4\", \"d4\", \"f4\", \"c3\", \"e3\", \"g5\", \"d2\"}) == 6\nsafe_pawns({\"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"e5\"}) == 1\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    For a game AI one of the important tasks is the ability to estimate game state.\n    This concept will show how you can do this on the simple chess figures positions.\n</p>\n\n<p>\n    <strong>Precondition:</strong><br>\n    0 &lt; pawns &le; 8\n</p>\n",
      "title": "Pawn Brotherhood",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 343,
      "initialCode": "def safe_pawns(pawns: set) -> int:\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert safe_pawns({\"b4\", \"d4\", \"f4\", \"c3\", \"e3\", \"g5\", \"d2\"}) == 6\r\n    assert safe_pawns({\"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"e5\"}) == 1\r\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "pawn-brotherhood"
    },
    {
      "languages": [
        "en",
        "fr",
        "hu",
        "ja",
        "pt-br",
        "ru",
        "uk",
        "zh-hans"
      ],
      "code": "from typing import List\r\n\r\ndef checkio(game_result: List[str]) -> str:\r\n    return \"D\" or \"X\" or \"O\"\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(checkio([\"X.O\",\r\n                   \"XX.\",\r\n                   \"XOO\"]))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert checkio([\r\n        \"X.O\",\r\n        \"XX.\",\r\n        \"XOO\"]) == \"X\", \"Xs wins\"\r\n    assert checkio([\r\n        \"OO.\",\r\n        \"XOX\",\r\n        \"XOX\"]) == \"O\", \"Os wins\"\r\n    assert checkio([\r\n        \"OOX\",\r\n        \"XXO\",\r\n        \"OXX\"]) == \"D\", \"Draw\"\r\n    assert checkio([\r\n        \"O.X\",\r\n        \"XX.\",\r\n        \"XOO\"]) == \"X\", \"Xs wins again\"\r\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")",
      "description": "<div style=\"text-align: center\">\n        <img src=\"https://py-static.checkio.org/media/task/media/4abe068a7ce44b3a86828a8e17cad1b4/title.png\" style=\"max-height: 530px\">\n</div>\n\n<p>\n    Tic-Tac-Toe, sometimes also known as Xs and Os, is a game for two players\n    (X and O) who take turns marking the spaces in a 3\u00d73 grid.\n    The player who succeeds in placing three respective marks in a horizontal, vertical, or diagonal rows (NW-SE and\n    NE-SW) wins the game.\n</p>\n\n<p>\n    But we will not be playing this game. You will be the referee for this games results. You are given a result of a\n    game and you must determine if the game ends in a win or a draw as well as who will be the winner. Make sure to\n    return \"X\"\n    if the X-player wins and \"O\" if the O-player wins. If the game is a draw, return \"D\".\n</p>\n\n<p style=\"text-align: center;\">\n    <img title=\"x-o-referee\" src=\"https://py-static.checkio.org/media/task/media/4abe068a7ce44b3a86828a8e17cad1b4/x-o-referee.png\" alt=\"x-o-referee\" style=\"max-height: 325px\"/>\n</p>\n\n\n<p>\n    A game's result is presented as a list of strings, where \"X\" and \"O\" are players' marks and \".\" is the empty cell.\n</p>\n\n\n<p>\n    <strong>Input: </strong> A game result as a list of strings (unicode).\n</p>\n\n<p>\n    <strong>Output: </strong> \"X\", \"O\" or \"D\" as a string.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\ncheckio([\n    \"X.O\",\n    \"XX.\",\n    \"XOO\"]) == \"X\"\ncheckio([\n    \"OO.\",\n    \"XOX\",\n    \"XOX\"]) == \"O\"\ncheckio([\n    \"OOX\",\n    \"XXO\",\n    \"OXX\"]) == \"D\"\n</pre>\n</div>\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    The concepts in this task will help you when iterating data types.\n    They can  also be used in game algorithms, allowing you to know how to check results.\n\n</p>\n\n<!--\n<p class=\"for_info_only\">\n    <strong>How to use TryIt: </strong><br>\n    <iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/fUFgb_LU2z4\" frameborder=\"0\" allowfullscreen></iframe>\n</p>\n-->\n\n<p><strong>Precondition:</strong><br>\n    There is either one winner or a draw.<br>\n    len(game_result) == 3<br>\n    all(len(row) == 3 for row in game_result)\n</p>\n",
      "title": "Xs and Os Referee",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 219,
      "initialCode": "from typing import List\r\n\r\ndef checkio(game_result: List[str]) -> str:\r\n    return \"D\" or \"X\" or \"O\"\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(checkio([\"X.O\",\r\n                   \"XX.\",\r\n                   \"XOO\"]))\r\n\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert checkio([\r\n        \"X.O\",\r\n        \"XX.\",\r\n        \"XOO\"]) == \"X\", \"Xs wins\"\r\n    assert checkio([\r\n        \"OO.\",\r\n        \"XOX\",\r\n        \"XOX\"]) == \"O\", \"Os wins\"\r\n    assert checkio([\r\n        \"OOX\",\r\n        \"XXO\",\r\n        \"OXX\"]) == \"D\", \"Draw\"\r\n    assert checkio([\r\n        \"O.X\",\r\n        \"XX.\",\r\n        \"XOO\"]) == \"X\", \"Xs wins again\"\r\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "x-o-referee"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "class Warrior:\n    pass\n\nclass Knight(Warrior):\n    pass\n\ndef fight(unit_1, unit_2):\n    return 0\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n\n    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n\n    print(\"Coding complete? Let's try tests!\")\n",
      "description": "<div class=\"story for_info_only\">\nOne day, on a typical spring afternoon, Sir Ronald has been looking around his land, riding a horse. Nothing foretold troubles, when suddenly Sir Ronald heard a scream for help, coming from somewhere nearby: <br>\n- \"Help! Help!\" - shouted a piercing young girl's voice. <br>\nAs a true knight, Sir Ronald couldn\u2019t stay away and went to the lady\u2019s rescue. Rushing in the direction from which the cry came, he saw a carriage. The girl peered out the window hoping to see someone who could help her. <br>\n- \"Stop!\"- ordered Sir Ronald to the coachman. - \"By what right are you on my land?\" <br>\nThe coachman didn\u2019t get a chance to open his mouth, as his master came out of the carriage. <br>\n- \"My respects, noble sir. I had no idea that this land is yours. My bride and I were just going to my estate, not wanting to give anyone any trouble. \"<br>\n- \"A flat-out lie! I'm not his bride!\" - the girl exclaimed from the window. <br>\n- \"Explain yourself, Sir. What does that mean?\",- said Sir Ronald. <br>\n- \"Of course. The king of a neighboring country has promised his daughter and half his kingdom to the one who\u2019ll save her from the outlaws who took her. I\u2019ve defeated those bastards and now I\u2019m taking the princess to her father. \"<br>\n- \"It's not true! They were in on it together They\u2019ve kidnapped me on his order! I saw how he paid them a bag of gold!\" - The princess didn\u2019t stop taking for a second, trying to quickly describe the situation to the miraculously appeared savior. <br>\n- \"Such behavior is unworthy of a knight! Prepare to die!\",- exclaimed Sir Ronald, drawing his sword.\n- \"Ha-ha-ha, simple-hearted nobleman! We\u2019ll see about that...\"\n</div>\n\n<p>\nI'm sure that many of you have some experience with computer games. But have you ever wanted to change the game so that the characters or a game world would be more consistent with your idea of the perfect game? Probably, yes.<br>\nIn this mission (and in several subsequent ones, related to it) you\u2019ll have a chance \"to sit in the developer's chair\" and create the logic of a simple game about battles.<br>\nLet's start with the simple task - one-on-one duel. You need to create the class <strong>Warrior</strong>, the instances of which will have 2 parameters - health (equal to 50 points) and attack (equal to 5 points), and 1 property - is_alive, which can be True (if warrior's health is > 0) or False (in the other case). In addition you have to create the second unit type - Knight, which should be the subclass of the Warrior but have the increased attack - 7. Also you have to create a function <strong>fight()</strong>, which will initiate the duel between 2 warriors and define the strongest of them. The duel occurs according to the following principle:<br>\nEvery turn, the first warrior will hit the second and this second will lose his health in the same value as the attack of the first warrior. After that, if he is still alive, the second warrior will do the same to the first one.<br>\nThe fight ends with the death of one of them. If the first warrior is still alive (and thus the other one is not anymore), the function should return <strong>True</strong>, <strong>False</strong> otherwise.\n</p>\n\n<p class=\"for_info_only\" style=\"text-align: center;\">\n    <img  title=\"fight\" src=\"https://py-static.checkio.org/media/task/media/4e0dd625813446a595c6f45e5033d355/warrior.png\" alt=\"example\" style=\"max-height: 600px\"/>\n</p>\n\n<div class=\"for_info_only\">\n<p>\n<strong>Example</strong>:\n<pre class=\"brush: python\">\nchuck = Warrior()\nbruce = Warrior()\ncarl = Knight()\ndave = Warrior()\n\nfight(chuck, bruce) == True\nfight(dave, carl) == False\nchuck.is_alive == True\nbruce.is_alive == False\ncarl.is_alive == True\ndave.is_alive == False\n</pre>\n</p>\n</div>\n\n<p>\n    <strong>Input: </strong>The warriors.\n</p>\n\n<p>\n    <strong>Output: </strong>The result of the duel (True or False).\n</p>\n\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    For computer games development.\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    <ul>\n        <li>2 types of units</li>\n        <li>All given fights have an end (for all missions).</li>\n    </ul>\n</p>\n",
      "title": "The Warriors",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 566,
      "initialCode": "class Warrior:\n    pass\n\nclass Knight(Warrior):\n    pass\n\ndef fight(unit_1, unit_2):\n    return 0\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n\n    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n\n    print(\"Coding complete? Let's try tests!\")\n",
      "stationId": "1",
      "stationName": "Home",
      "isSolved": false,
      "slug": "the-warriors"
    },
    {
      "languages": [
        "en",
        "fr",
        "ja",
        "ru",
        "sv"
      ],
      "code": "def mult_two(a, b):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(mult_two(3, 2))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert mult_two(3, 2) == 6\n    assert mult_two(1, 0) == 0\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "description": "<p><i>(at the top right of the mission description there always is a list of available translations)</i></p>\n\n<p>This is an intro mission, the purpose of which is to explain how to solve missions on CheckiO and how to get the most out of solving them. When the mission is solved, one more station become available for you, containing more complex missions.</p>\n\n<p>So this mission is the easiest one. Write a function that will receive 2 numbers as input and it should return the multiplication of these 2 numbers.</p>\n\n\n<p>\n    <strong>Input: </strong> Two arguments. Both are int\n</p>\n\n<p>\n    <strong>Output: </strong> Int. \n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">mult_two(2, 3) == 6\nmult_two(1, 0) == 0\n</pre>\n\n</div>\n\n<p><b>How does it work?:</b></p>\n\n<p>When you start solving the initial code is always consists of an \u201cempty\u201d function (which you need to fill in as the solution) and asserts under this function. You should pay attention to is that your function should return values, and not to print them. \n\n\nThat is, use the return command instead of the print function. <a target=\"_blank\" target=\"_blank\" href=\"https://stackoverflow.com/questions/7129285/what-is-the-purpose-of-the-return-statement\">Check this short explanation.</a>\n\n</p>\n\n<p>The asserts after your function you can use in order to check yourself  by pressing the \u201cRun\u201d button (<img style=\"height: 31px;vertical-align: bottom;\" src=\"https://py-static.checkio.org/media/task/media/02c64951715744de9e54c959e3d98def/btn_run.png\" />). CheckiO also uses several additional tests in order to check your solution when you click the \u201cCheck\u201d button (<img style=\"height: 31px;vertical-align: bottom;\" src=\"https://py-static.checkio.org/media/task/media/02c64951715744de9e54c959e3d98def/btn_check.png\" />).</p>\n\n<p>If the solution didn\u2019t pass the internal tests, the right panel will display an error message containing 3 items.</p>\n\n<ul>\n<li><b>Fail:</b> - shows how your function was called.</li>\n<li><b>Your Result:</b> - shows what it returned.</li>\n<li><b>Right Result:</b> - what it should\u2019ve returned.</li>\n</ul>\n\n<p>To solve the task the \u201cempty\u201d function must be replaced with the following code.</p>\n\n\n<pre class=\"brush: python\">\ndef mult_two(a: int, b: int) -> int:\n    return a*b\n</pre>\n\n\n<p>Try to click \u201cCheck\u201d button now. </p>\n\n\n<p>If the solution passes all the tests, the congratulations should appear on the right panel along with a suggestion for the following action. (Yes, this is not the end of the story).</p>\n\n<ul>\n<li><b>View other solutions</b> - when the task is solved, you can access the solutions of other players, which are divided into categories.</li>\n<li><b>Publish your solution</b> - publish your own solution.</li>\n<li><b>Next Mission</b> - go to the next mission.</li>\n</ul>\n\n<p>I\u2019d recommend to go through the solutions of other players before publishing your own.</p>\n\n<p>The last but not the least, some tasks at the end have a list of hints for solving. But since in this task we\u2019ve already described how to solve, then in hints we\u2019ll add some interesting facts about CheckiO</p>\n",
      "title": "Multiply (Intro)",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 607,
      "initialCode": "def mult_two(a, b):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(mult_two(3, 2))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert mult_two(3, 2) == 6\n    assert mult_two(1, 0) == 0\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "multiply-intro"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru",
        "sv",
        "zh-hans"
      ],
      "code": "# 1. on CheckiO your solution should be a function\n# 2. the function should return the right answer, not print it.\n\ndef say_hi(name: str, age: int) -> str:\n    \"\"\"\n        Hi!\n    \"\"\"\n    # your code here\n    return \"Hi. My name is Alex and I'm 32 years old\"\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert say_hi(\"Alex\", 32) == \"Hi. My name is Alex and I'm 32 years old\", \"First\"\n    assert say_hi(\"Frank\", 68) == \"Hi. My name is Frank and I'm 68 years old\", \"Second\"\n    print('Done. Time to Check.')\n",
      "description": "<p>\nIn this mission you should write a function that introduces a person with the given parameter's attributes.\n\n</p>\n\n\n\n<p>\n    <strong>Input: </strong> Two arguments. String and positive integer.\n</p>\n\n<p>\n    <strong>Output: </strong> String.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">say_hi(\"Alex\", 32) == \"Hi. My name is Alex and I'm 32 years old\"\nsay_hi(\"Frank\", 68) == \"Hi. My name is Frank and I'm 68 years old\"\n</pre>\n\n</div>\n\n",
      "title": "Say Hi",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 505,
      "initialCode": "# 1. on CheckiO your solution should be a function\n# 2. the function should return the right answer, not print it.\n\ndef say_hi(name: str, age: int) -> str:\n    \"\"\"\n        Hi!\n    \"\"\"\n    # your code here\n    return \"Hi. My name is Alex and I'm 32 years old\"\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert say_hi(\"Alex\", 32) == \"Hi. My name is Alex and I'm 32 years old\", \"First\"\n    assert say_hi(\"Frank\", 68) == \"Hi. My name is Frank and I'm 68 years old\", \"Second\"\n    print('Done. Time to Check.')\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "say-history"
    },
    {
      "languages": [
        "en",
        "fr",
        "ja",
        "ru",
        "zh-hans"
      ],
      "code": "def easy_unpack(elements: tuple) -> tuple:\n    \"\"\"\n        returns a tuple with 3 elements - first, third and second to the last\n    \"\"\"\n    # your code here\n    return ()\n\nif __name__ == '__main__':\n    print('Examples:')\n    print(easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)\n    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)\n    assert easy_unpack((6, 3, 7)) == (6, 7, 3)\n    print('Done! Go Check!')\n",
      "description": "<p>\n    Your mission here is to create a function that gets a tuple and returns a tuple with 3 elements - the first, third and second to the last for the given array.\n</p>\n\n<p>\n    <strong>Input: </strong> A tuple, at least 3 elements long.\n</p>\n\n<p>\n    <strong>Output: </strong> A tuple. \n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n<pre class=\"brush: javascript\">\neasy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)\neasy_unpack((1, 1, 1, 1)) == (1, 1, 1)\neasy_unpack((6, 3, 7)) == (6, 7, 3)\n</pre>\n\n</div>\n",
      "title": "Easy Unpack",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 502,
      "initialCode": "def easy_unpack(elements: tuple) -> tuple:\n    \"\"\"\n        returns a tuple with 3 elements - first, third and second to the last\n    \"\"\"\n    # your code here\n    return ()\n\nif __name__ == '__main__':\n    print('Examples:')\n    print(easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)\n    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)\n    assert easy_unpack((6, 3, 7)) == (6, 7, 3)\n    print('Done! Go Check!')\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "easy-unpack"
    },
    {
      "languages": [
        "de",
        "en",
        "cs",
        "el",
        "es",
        "fa",
        "fr",
        "it",
        "ja",
        "pl",
        "pt-br",
        "ru",
        "uk"
      ],
      "code": "def index_power(array: list, n: int) -> int:\n    \"\"\"\n        Find Nth power of the element with index N.\n    \"\"\"\n    return None\n\nif __name__ == '__main__':\n    print('Example:')\n    print(index_power([1, 2, 3, 4], 2))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert index_power([1, 2, 3, 4], 2) == 9, \"Square\"\n    assert index_power([1, 3, 10, 100], 3) == 1000000, \"Cube\"\n    assert index_power([0, 1], 0) == 1, \"Zero power\"\n    assert index_power([1, 2], 3) == -1, \"IndexError\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<p>\n    You are given an array with positive numbers and a number N. You should find the N-th power of the element in the\n    array with the index N. If N is outside of the array, then return -1. Don't forget that the first element has the\n    index 0.\n</p>\n\n<p>\n    Let's look at a few examples:<br>\n    - array = [1, 2, 3, 4] and N = 2, then the result is 3<sup>2</sup> == 9;<br>\n    - array = [1, 2, 3] and N = 3, but N is outside of the array, so the result is -1.\n</p>\n\n<p>\n    <strong>Input: </strong> Two arguments. An array as a list of integers and a number as a integer.\n</p>\n\n<p>\n    <strong>Output: </strong> The result as an integer.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    \n        <pre class=\"brush: python\">\nindex_power([1, 2, 3, 4], 2) == 9\nindex_power([1, 3, 10, 100], 3) == 1000000\nindex_power([0, 1], 0) == 1\nindex_power([1, 2], 3) == -1\n        </pre>\n    \n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This mission teaches you how to use basic arrays and indexes when combined with simple mathematics.\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    0 &lt; len(array) &le; 10<br>\n    0 &le; N<br>\n    all(0 &le; x &le; 100 for x in array)<br>\n</p>\n",
      "title": "Index Power",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 363,
      "initialCode": "def index_power(array: list, n: int) -> int:\n    \"\"\"\n        Find Nth power of the element with index N.\n    \"\"\"\n    return None\n\nif __name__ == '__main__':\n    print('Example:')\n    print(index_power([1, 2, 3, 4], 2))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert index_power([1, 2, 3, 4], 2) == 9, \"Square\"\n    assert index_power([1, 3, 10, 100], 3) == 1000000, \"Cube\"\n    assert index_power([0, 1], 0) == 1, \"Zero power\"\n    assert index_power([1, 2], 3) == -1, \"IndexError\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "index-power"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "fr",
        "hu",
        "it",
        "ja",
        "ru",
        "uk",
        "zh-hans"
      ],
      "code": "def checkio(number: int) -> int:\n\n    return 1\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(123405))\n    \n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert checkio(123405) == 120\n    assert checkio(999) == 729\n    assert checkio(1000) == 1\n    assert checkio(1111) == 1\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"juggler\" src=\"https://py-static.checkio.org/media/task/media/61139715c4734b25bbaed6ae78f80886/juggler.png\" alt=\"juggler\" style=\"max-height: 300px;float: left;\"/>\n<p>\n    You are given a positive integer.\n    Your function should calculate the product of the digits excluding any zeroes.\n</p>\n\n<p>\n    For example: The number given is 123405. The result will be 1*2*3*4*5=120 (don't forget to exclude zeroes).\n</p>\n\n<p>\n    <strong>Input: </strong> A positive integer.\n</p>\n\n<p>\n    <strong>Output: </strong> The product of the digits as an integer.\n</p>\n\n<div style=\"clear: both;\"></div>\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio(123405) == 120\ncheckio(999) == 729\ncheckio(1000) == 1\ncheckio(1111) == 1\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This task can teach you how to solve a problem with simple data type conversion.\n</p>\n\n<p>\n    <strong>Precondition: </strong>\n        0 &lt; number &lt; 10<sup>6</sup>\n</p>\n",
      "title": "Digits Multiplication",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 270,
      "initialCode": "def checkio(number: int) -> int:\n\n    return 1\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(123405))\n    \n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert checkio(123405) == 120\n    assert checkio(999) == 729\n    assert checkio(1000) == 1\n    assert checkio(1111) == 1\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "digits-multiplication"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "es",
        "fa",
        "fr",
        "it",
        "ja",
        "pl",
        "pt-br",
        "pt",
        "ru",
        "uk"
      ],
      "code": "def find_message(text: str) -> str:\n    \"\"\"Find a secret message\"\"\"\n    return \"\"\n\nif __name__ == '__main__':\n    print('Example:')\n    print(find_message(\"How are you? Eh, ok. Low or Lower? Ohhh.\"))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_message(\"How are you? Eh, ok. Low or Lower? Ohhh.\") == \"HELLO\", \"hello\"\n    assert find_message(\"hello world!\") == \"\", \"Nothing\"\n    assert find_message(\"HELLO WORLD!!!\") == \"HELLOWORLD\", \"Capitals\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<div style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/553bae8bd22347b19e04f0c0cbe0084c/title.png\" style=\"max-height: 350px\">\n</div>\n\n<p class=\"story\">\n    \"Where does a wise man hide a leaf? In the forest.\n    But what does he do if there is no forest? ... He grows a forest to hide it in.\"<br>\n    -- Gilbert Keith Chesterton\n</p>\n\n<p>\n    Ever tried to send a secret message to someone without using the postal service? You could use newspapers to tell\n    your secret. Even if someone finds your message, it's easy to brush them off as paranoid and as a\n    conspiracy theorist. One of the simplest ways to hide a secret message is to use capital letters. Let's find some of\n    these secret messages.\n</p>\n\n<p>\n    You are given a chunk of text. Gather all capital letters in one word in the order that they appear in the text.\n</p>\n<p>\n    For example: text =\n    \"<strong>H</strong>ow are you? <strong>E</strong>h, ok. <strong>L</strong>ow or <strong>L</strong>ower?\n    <strong>O</strong>hhh.\",\n    if we collect all of the capital letters, we get the message \"HELLO\".\n</p>\n\n<p>\n    <strong>Input: </strong> A text as a string (unicode).\n</p>\n\n<p>\n    <strong>Output: </strong> The secret message as a string or an empty string.\n</p>\n\n\n<div class=\"for_info_only\">\n\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\nfind_message(\"How are you? Eh, ok. Low or Lower? Ohhh.\") == \"HELLO\"\nfind_message(\"hello world!\") == \"\"\n    </pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This is a simple exercise in working with strings: iterate, recognize and concatenate.\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    0 &lt; len(text) &le; 1000<br>\n    all(ch in string.printable for ch in text)\n</p>\n",
      "title": "Secret Message",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 364,
      "initialCode": "def find_message(text: str) -> str:\n    \"\"\"Find a secret message\"\"\"\n    return \"\"\n\nif __name__ == '__main__':\n    print('Example:')\n    print(find_message(\"How are you? Eh, ok. Low or Lower? Ohhh.\"))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert find_message(\"How are you? Eh, ok. Low or Lower? Ohhh.\") == \"HELLO\", \"hello\"\n    assert find_message(\"hello world!\") == \"\", \"Nothing\"\n    assert find_message(\"HELLO WORLD!!!\") == \"HELLOWORLD\", \"Capitals\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "secret-message"
    },
    {
      "languages": [
        "en",
        "cs",
        "de",
        "el",
        "es",
        "fa",
        "fr",
        "hu",
        "it",
        "ja",
        "pl",
        "pt-br",
        "ru",
        "uk",
        "zh-cn",
        "zh-hans"
      ],
      "code": "# Your optional code here\n# You can import some modules or create additional functions\n\n\ndef checkio(number: int) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing and must return a result for check.\n\n    # replace this for solution\n    return 'Fizz Buzz'\n\n# Some hints:\n# Convert a number in the string with str(n)\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(15))\n    \n    assert checkio(15) == \"Fizz Buzz\", \"15 is divisible by 3 and 5\"\n    assert checkio(6) == \"Fizz\", \"6 is divisible by 3\"\n    assert checkio(5) == \"Buzz\", \"5 is divisible by 5\"\n    assert checkio(7) == \"7\", \"7 is not divisible by 3 or 5\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"juggler\" src=\"https://py-static.checkio.org/media/task/media/330371a1e78c41cdb3add01220aa432a/calculator.png\" alt=\"juggler\" style=\"float: left\" />\n\n<p>\n    \"Fizz buzz\" is a word game we will use to teach the robots about division. Let's learn computers.\n</p>\n\n<p>\n    You should write a function that will receive a positive integer and return:<br>\n    <strong>\"Fizz Buzz\"</strong> if the number is divisible by 3 and by 5;<br>\n    <strong>\"Fizz\"</strong> if the number is divisible by 3;<br>\n    <strong>\"Buzz\"</strong> if the number is divisible by 5; <br>\n    <strong>The number</strong> as a string for other cases.<br>\n</p>\n\n<p>\n    <strong>Input: </strong> A number as an integer.\n</p>\n\n<p>\n    <strong>Output: </strong> The answer as a string.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio(15) == \"Fizz Buzz\"\ncheckio(6) == \"Fizz\"\ncheckio(5) == \"Buzz\"\ncheckio(7) == \"7\"\n\n    </pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    Here you can learn how to write the simplest function and work with if-else statements.\n</p>\n\n\n<p>\n    <strong>Precondition:</strong>\n    0 &lt; number &le; 1000\n</p>\n",
      "title": "Fizz Buzz",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 278,
      "initialCode": "# Your optional code here\n# You can import some modules or create additional functions\n\n\ndef checkio(number: int) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing and must return a result for check.\n\n    # replace this for solution\n    return 'Fizz Buzz'\n\n# Some hints:\n# Convert a number in the string with str(n)\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(15))\n    \n    assert checkio(15) == \"Fizz Buzz\", \"15 is divisible by 3 and 5\"\n    assert checkio(6) == \"Fizz\", \"6 is divisible by 3\"\n    assert checkio(5) == \"Buzz\", \"5 is divisible by 5\"\n    assert checkio(7) == \"7\", \"7 is not divisible by 3 or 5\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "fizz-buzz"
    },
    {
      "languages": [
        "de",
        "ru",
        "en",
        "el",
        "es",
        "fa",
        "fr",
        "hu",
        "it",
        "ja",
        "pl",
        "pt-br",
        "pt",
        "uk",
        "zh-hans"
      ],
      "code": "def checkio(array):\n    \"\"\"\n        sums even-indexes elements and multiply at the last\n    \"\"\"\n    return 0\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio([0, 1, 2, 3, 4, 5]))\n    \n    assert checkio([0, 1, 2, 3, 4, 5]) == 30, \"(0+2+4)*5=30\"\n    assert checkio([1, 3, 5]) == 30, \"(1+5)*5=30\"\n    assert checkio([6]) == 36, \"(6)*6=36\"\n    assert checkio([]) == 0, \"An empty array = 0\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"slice\" src=\"https://py-static.checkio.org/media/task/media/6ab3789385b44e3596d81b1ae6fb0134/slice.png\" alt=\"slice\"\n     style=\"float: left; \"/>\n\n\n<p>\n    You are given an array of integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...). Then multiply this summed number and the final element of the array together. \n     Don't forget that the first element has an index of 0.\n</p>\n\n<p>\n    For an empty array, the result will always be 0 (zero).\n</p>\n\n<p>\n    <strong>Input: </strong> A list of integers.\n</p>\n\n<p>\n    <strong>Output: </strong> The number as an integer.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio([0, 1, 2, 3, 4, 5]) == 30\ncheckio([1, 3, 5]) == 30\ncheckio([6]) == 36\ncheckio([]) == 0\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    Indexes and slices are important elements of coding. This will come in handy down the\n    road!\n</p>\n\n<p>\n    <strong>Precondition: </strong>\n    0 &le; len(array) &le; 20<br>\n    all(isinstance(x, int) for x in array)<br>\n    all(-100 &lt; x &lt; 100 for x in array)<br>\n</p>\n",
      "title": "Even the Last",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 269,
      "initialCode": "def checkio(array):\n    \"\"\"\n        sums even-indexes elements and multiply at the last\n    \"\"\"\n    return 0\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio([0, 1, 2, 3, 4, 5]))\n    \n    assert checkio([0, 1, 2, 3, 4, 5]) == 30, \"(0+2+4)*5=30\"\n    assert checkio([1, 3, 5]) == 30, \"(1+5)*5=30\"\n    assert checkio([6]) == 36, \"(6)*6=36\"\n    assert checkio([]) == 0, \"An empty array = 0\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "even-last"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru"
      ],
      "code": "def best_stock(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(best_stock({\"CAC\": 10.0, \"ATX\": 390.2, \"WIG\": 1.2}))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert best_stock({\"CAC\": 10.0, \"ATX\": 390.2, \"WIG\": 1.2}) == \"ATX\"\n    assert best_stock({\"CAC\": 91.1, \"ATX\": 1.01, \"TASI\": 120.9}) == \"TASI\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "description": "<!-- Describe task in general -->\n\n<p>\n    You are given the current stock prices. You have to find out which stocks cost more. \n</p>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> The dictionary where the market identifier code is a key and the value is a stock price.\n</p>\n\n<p>\n    <strong>Output: </strong> The market identifier code (ticker symbol) as a string. \n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">best_stock({\"CAC\": 10.0, \"ATX\": 390.2, \"WIG\": 1.2}) == \"ATX\"\nbest_stock({\"CAC\": 91.1, \"ATX\": 1.01, \"TASI\": 120.9}) == \"TASI\"\n</pre>\n\n</div>\n\n<p>\n    <strong>Preconditions: </strong> All the prices are unique.\n</p>\n",
      "title": "Best Stock",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 516,
      "initialCode": "def best_stock(a):\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(best_stock({\"CAC\": 10.0, \"ATX\": 390.2, \"WIG\": 1.2}))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert best_stock({\"CAC\": 10.0, \"ATX\": 390.2, \"WIG\": 1.2}) == \"ATX\"\n    assert best_stock({\"CAC\": 91.1, \"ATX\": 1.01, \"TASI\": 120.9}) == \"TASI\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "best-stock"
    },
    {
      "languages": [
        "en",
        "fr",
        "ja",
        "pl",
        "ru"
      ],
      "code": "def correct_sentence(text: str) -> str:\n    \"\"\"\n        returns a corrected sentence which starts with a capital letter\n        and ends with a dot.\n    \"\"\"\n    # your code here\n    return text\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(correct_sentence(\"greetings, friends\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert correct_sentence(\"greetings, friends\") == \"Greetings, friends.\"\n    assert correct_sentence(\"Greetings, friends\") == \"Greetings, friends.\"\n    assert correct_sentence(\"Greetings, friends.\") == \"Greetings, friends.\"\n    assert correct_sentence(\"hi\") == \"Hi.\"\n    assert correct_sentence(\"welcome to New York\") == \"Welcome to New York.\"\n    \n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "description": "<!-- Describe task in general -->\n\n<p>\n    For the input of your function, you will be given one sentence. You have to return a corrected version, that starts with a capital letter and ends with a period (dot). \n</p>\n\n<p><i>Pay attention to the fact that not all of the fixes are necessary. If a sentence already ends with a period (dot), then adding another one will be a mistake.</i></p>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> A string.\n</p>\n\n<p>\n    <strong>Output: </strong> A string.\n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">correct_sentence(\"greetings, friends\") == \"Greetings, friends.\"\ncorrect_sentence(\"Greetings, friends\") == \"Greetings, friends.\"\ncorrect_sentence(\"Greetings, friends.\") == \"Greetings, friends.\"\n</pre>\n\n</div>\n<!-- Here you can explain how it can be used in development and what is usage of this. -->\n<p>\n    <strong>Precondition:</strong>\n    <i>No leading and trailing spaces, text contains only spaces, a-z A-Z , and .</i>\n</p>\n",
      "title": "Correct Sentence",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 510,
      "initialCode": "def correct_sentence(text: str) -> str:\n    \"\"\"\n        returns a corrected sentence which starts with a capital letter\n        and ends with a dot.\n    \"\"\"\n    # your code here\n    return text\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(correct_sentence(\"greetings, friends\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert correct_sentence(\"greetings, friends\") == \"Greetings, friends.\"\n    assert correct_sentence(\"Greetings, friends\") == \"Greetings, friends.\"\n    assert correct_sentence(\"Greetings, friends.\") == \"Greetings, friends.\"\n    assert correct_sentence(\"hi\") == \"Hi.\"\n    assert correct_sentence(\"welcome to New York\") == \"Welcome to New York.\"\n    \n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "correct-sentence"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "es",
        "fr",
        "ja",
        "ru",
        "uk"
      ],
      "code": "def left_join(phrases):\n    \"\"\"\n        Join strings and replace \"right\" to \"left\"\n    \"\"\"\n    return \"left\"\n\nif __name__ == '__main__':\n    print('Example:')\n    print(left_join((\"left\", \"right\", \"left\", \"stop\")))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert left_join((\"left\", \"right\", \"left\", \"stop\")) == \"left,left,left,stop\", \"All to left\"\n    assert left_join((\"bright aright\", \"ok\")) == \"bleft aleft,ok\", \"Bright Left\"\n    assert left_join((\"brightness wright\",)) == \"bleftness wleft\", \"One phrase\"\n    assert left_join((\"enough\", \"jokes\")) == \"enough,jokes\", \"Nothing to replace\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<div class=\"story\">\n    <p>\"For centuries, left-handers have suffered unfair discrimination in a world designed for right-handers.\"\n        <br>Santrock, John W. (2008). Motor, Sensory, and Perceptual Development.</p>\n\n    <p>\n        \"Most humans (say 70 percent to 95 percent) are right-handed, a minority (say 5 percent to 30 percent)\n        are left-handed, and an indeterminate number of people are probably best described as ambidextrous.\"\n        <br>Scientific American. www.scientificamerican.com</p>\n\n</div>\n\n<p>\n    One of the robots is charged with a simple task:\n    to join a sequence of strings into one sentence to produce instructions\n    on how to get around the ship.\n    But this robot is left-handed and has a tendency to joke around and confuse its right-handed friends.\n</p>\n<p>\n    You are given a sequence of strings.\n    You should join these strings into chunk of text where the initial strings are separated by commas.\n    As a joke on the right handed robots, you should replace all cases of the words \"right\" with the word \"left\",\n    even if it's a part of another word. All strings are given in lowercase.\n</p>\n\n\n<p>\n    <strong>Input: </strong> A sequence of strings as a tuple of strings (unicode).\n</p>\n\n<p>\n    <strong>Output: </strong> The text as a string.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\nleft_join((\"left\", \"right\", \"left\", \"stop\")) == \"left,left,left,stop\"\nleft_join((\"bright aright\", \"ok\")) == \"bleft aleft,ok\"\nleft_join((\"brightness wright\",)) == \"bleftness wleft\"\nleft_join((\"enough\", \"jokes\")) == \"enough,jokes\"\n    </pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This is a simple example of operations using strings and sequences.\n</p>\n\n<p>\n    <strong>Precondition:</strong><br>\n    0 &lt; len(phrases) &lt; 42<br>\n</p>\n",
      "title": "Right to Left",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 354,
      "initialCode": "def left_join(phrases):\n    \"\"\"\n        Join strings and replace \"right\" to \"left\"\n    \"\"\"\n    return \"left\"\n\nif __name__ == '__main__':\n    print('Example:')\n    print(left_join((\"left\", \"right\", \"left\", \"stop\")))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert left_join((\"left\", \"right\", \"left\", \"stop\")) == \"left,left,left,stop\", \"All to left\"\n    assert left_join((\"bright aright\", \"ok\")) == \"bleft aleft,ok\", \"Bright Left\"\n    assert left_join((\"brightness wright\",)) == \"bleftness wleft\", \"One phrase\"\n    assert left_join((\"enough\", \"jokes\")) == \"enough,jokes\", \"Nothing to replace\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "right-to-left"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru"
      ],
      "code": "def second_index(text: str, symbol: str) -> [int, None]:\n    \"\"\"\n        returns the second index of a symbol in a given text\n    \"\"\"\n    # your code here\n    return 0\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(second_index(\"sims\", \"s\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert second_index(\"sims\", \"s\") == 3, \"First\"\n    assert second_index(\"find the river\", \"e\") == 12, \"Second\"\n    assert second_index(\"hi\", \" \") is None, \"Third\"\n    assert second_index(\"hi mayor\", \" \") is None, \"Fourth\"\n    assert second_index(\"hi mr Mayor\", \" \") == 5, \"Fifth\"\n    print('You are awesome! All tests are done! Go Check it!')\n",
      "description": "\n<p>\n    You are given two strings and you have to find an index of the second occurrence of the second string in the first one.\n</p>\n\n<p>\n\tLet's go through the first example where you need to find the second occurrence of \"s\" in a word \"sims\". It\u2019s easy to find its first occurrence with a function \n\n\n\t<a href=\"https://docs.python.org/3/library/stdtypes.html#str.index\">index</a> or <a href=\"https://docs.python.org/3/library/stdtypes.html#str.find\">find</a> \n\n\n\n\twhich will point out that \"s\" is the first symbol in a word \"sims\" and therefore the index of the first occurrence is 0. But we have to find the second \"s\" which is 4th in a row and that means that the index of the second occurrence (and the answer to a question) is 3. \n</p>\n\n<p>\n    <strong>Input: </strong> Two strings. \n</p>\n\n<p>\n    <strong>Output: </strong> Int or None\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">second_index(\"sims\", \"s\") == 3\nsecond_index(\"find the river\", \"e\") == 12\nsecond_index(\"hi\", \" \") is None\n</pre>\n\n</div>\n\n",
      "title": "Second Index",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 507,
      "initialCode": "def second_index(text: str, symbol: str) -> [int, None]:\n    \"\"\"\n        returns the second index of a symbol in a given text\n    \"\"\"\n    # your code here\n    return 0\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(second_index(\"sims\", \"s\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert second_index(\"sims\", \"s\") == 3, \"First\"\n    assert second_index(\"find the river\", \"e\") == 12, \"Second\"\n    assert second_index(\"hi\", \" \") is None, \"Third\"\n    assert second_index(\"hi mayor\", \" \") is None, \"Fourth\"\n    assert second_index(\"hi mr Mayor\", \" \") == 5, \"Fifth\"\n    print('You are awesome! All tests are done! Go Check it!')\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "second-index"
    },
    {
      "languages": [
        "en",
        "de",
        "es",
        "fr",
        "hu",
        "it",
        "ja",
        "ru",
        "uk",
        "zh-cn"
      ],
      "code": "def checkio(numbers_array: tuple) -> list:\n    return numbers_array\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(list(checkio((-20, -5, 10, 15))))\n\n    def check_it(array):\n        if not isinstance(array, (list, tuple)):\n            raise TypeError(\"The result should be a list or tuple.\")\n        return list(array)\n\n    assert check_it(checkio((-20, -5, 10, 15))) == [-5, 10, 15, -20], \"Example\"  # or (-5, 10, 15, -20)\n    assert check_it(checkio((1, 2, 3, 0))) == [0, 1, 2, 3], \"Positive numbers\"\n    assert check_it(checkio((-1, -2, -3, 0))) == [0, -1, -2, -3], \"Negative numbers\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"X\" src=\"https://py-static.checkio.org/media/task/media/e8bdcab7600146bf8aa15e644b1805a6/X.png\" alt=\"X\"\n     style=\"float: left\"/>\n\n\n<p>\n    Let's try some sorting. Here is an array with the specific rules.\n</p>\n\n<p>\n    The array\n    \n    (a tuple)\n    \n    has various numbers. You should sort it, but sort it by absolute value in ascending order.\n    For example, the sequence (-20, -5, 10, 15) will be sorted like so: (-5, 10, 15, -20).\n    Your function should return the sorted list  or tuple.\n</p>\n\n<p>\n    <strong>Precondition:</strong> The numbers in the array are unique by their absolute values.\n</p>\n<p>\n    <strong>Input: </strong> An array of numbers , a tuple..\n</p>\n\n<p>\n    <strong>Output: </strong> The list or tuple (but not a generator) sorted by absolute values in ascending order.\n</p>\n\n\n<p>\n    <strong>Addition: </strong> The results of your function will be shown as a list in the tests explanation panel.\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio((-20, -5, 10, 15)) == [-5, 10, 15, -20] # or (-5, 10, 15, -20)\ncheckio((1, 2, 3, 0)) == [0, 1, 2, 3]\ncheckio((-1, -2, -3, 0)) == [0, -1, -2, -3]\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    Sorting is a part of many tasks, so it will be useful to know how to use it.\n</p>\n\n<p>\n    <strong>Precondition</strong>:\n    len(set(abs(x) for x in array)) == len(array)<br>\n    0 &lt; len(array) &lt; 100<br>\n    all(isinstance(x, int) for x in array)<br>\n    all(-100 &lt; x &lt; 100 for x in array)<br>\n</p>",
      "title": "Absolute Sorting",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 280,
      "initialCode": "def checkio(numbers_array: tuple) -> list:\n    return numbers_array\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(list(checkio((-20, -5, 10, 15))))\n\n    def check_it(array):\n        if not isinstance(array, (list, tuple)):\n            raise TypeError(\"The result should be a list or tuple.\")\n        return list(array)\n\n    assert check_it(checkio((-20, -5, 10, 15))) == [-5, 10, 15, -20], \"Example\"  # or (-5, 10, 15, -20)\n    assert check_it(checkio((1, 2, 3, 0))) == [0, 1, 2, 3], \"Positive numbers\"\n    assert check_it(checkio((-1, -2, -3, 0))) == [0, -1, -2, -3], \"Negative numbers\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "absolute-sorting"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "es",
        "fr",
        "hu",
        "it",
        "ja",
        "pl",
        "pt-br",
        "ru",
        "uk",
        "zh-hans"
      ],
      "code": "def checkio(*args):\n    return 0\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    def almost_equal(checked, correct, significant_digits):\n        precision = 0.1 ** significant_digits\n        return correct - precision < checked < correct + precision\n        \n    print('Example:')\n    print(checkio(1, 2, 3))\n    \n    assert almost_equal(checkio(1, 2, 3), 2, 3), \"3-1=2\"\n    assert almost_equal(checkio(5, -5), 10, 3), \"5-(-5)=10\"\n    assert almost_equal(checkio(10.2, -2.2, 0, 1.1, 0.5), 12.4, 3), \"10.2-(-2.2)=12.4\"\n    assert almost_equal(checkio(), 0, 3), \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only half\" title=\"ruler\" src=\"https://py-static.checkio.org/media/task/media/a248184c62a140adb3befe110709ac5c/ruler.png\" alt=\"ruler\"\n     style=\"float: left; \"/>\n\n<p>\n    Let's work with numbers.\n</p>\n\n<p>\n    You are given an array of numbers (floats). You should find the difference between the maximum and minimum element.\n    Your function should be able to handle an undefined amount of arguments. For an empty argument list, the function\n    should\n    return 0.\n</p>\n\n<p>\n    Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.\n\n    So we should check the result with &plusmn;0.001 precision.<br>\n    Think about how to work with\n    an arbitrary number of arguments.\n</p>\n\n<p>\n    <strong>Input: </strong> An arbitrary number of arguments as numbers (int, float).\n</p>\n\n<p>\n    <strong>Output: </strong> The difference between maximum and minimum as a number (int, float).\n</p>\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n    <pre class=\"brush: python\">\ncheckio(1, 2, 3) == 2\ncheckio(5, -5) == 10\ncheckio(10.2, -2.2, 0, 1.1, 0.5) == 12.4\ncheckio() == 0\n    </pre>\n\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    Here you will learn about passing an undefined amount of arguments to functions.\n</p>\n\n<p>\n    <strong>Precondition: </strong>\n    0 &le; len(args) &le; 20<br>\n    all(-100 &lt; x &lt; 100 for x in args)<br>\n    all(isinstance(x, (int, float)) for x in args)\n</p>\n\n<div class=\"facts for_info_only\">\n    <p>\n        Your vote gains more value as you grow in level. Starting at level 5 you can upvote a publication twice and\n        starting at level 14, you can upvote something five times!\n    </p>\n</div>\n",
      "title": "The Most Numbers",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 274,
      "initialCode": "def checkio(*args):\n    return 0\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    def almost_equal(checked, correct, significant_digits):\n        precision = 0.1 ** significant_digits\n        return correct - precision < checked < correct + precision\n        \n    print('Example:')\n    print(checkio(1, 2, 3))\n    \n    assert almost_equal(checkio(1, 2, 3), 2, 3), \"3-1=2\"\n    assert almost_equal(checkio(5, -5), 10, 3), \"5-(-5)=10\"\n    assert almost_equal(checkio(10.2, -2.2, 0, 1.1, 0.5), 12.4, 3), \"10.2-(-2.2)=12.4\"\n    assert almost_equal(checkio(), 0, 3), \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "most-numbers"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def first_word(text: str) -> str:\r\n    \"\"\"\r\n        returns the first word in a given text.\r\n    \"\"\"\r\n    # your code here\r\n    return text[0:2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(first_word(\"Hello world\"))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert first_word(\"Hello world\") == \"Hello\"\r\n    assert first_word(\"a word\") == \"a\"\r\n    assert first_word(\"hi\") == \"hi\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    You are given a string where you have to find its first word.\n</p>\n\n<p>\n    This is a simplified version of the <a href=\"/mission/first-word/\">First Word</a> mission.\n</p>\n<ul>\n    <li>Input string consists of only english letters and spaces.</li>\n    <li>There aren\u2019t any spaces at the beginning and the end of the string.</li>\n</ul>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> A string.\n</p>\n\n<p>\n    <strong>Output: </strong> A string. \n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">first_word(\"Hello world\") == \"Hello\"\n</pre>\n\n</div>\n<!-- Here you can explain how it can be used in development. -->\n<!-- The section is optional -->\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    <i>The first word is a command in a command line.</i>\n</p>\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p>\n    <strong>Precondition:</strong>\n    <i>Text can contain a-z, A-Z and spaces.</i>\n</p>\n",
      "title": "First Word (simplified)",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 628,
      "initialCode": "def first_word(text: str) -> str:\r\n    \"\"\"\r\n        returns the first word in a given text.\r\n    \"\"\"\r\n    # your code here\r\n    return text[0:2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(first_word(\"Hello world\"))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert first_word(\"Hello world\") == \"Hello\"\r\n    assert first_word(\"a word\") == \"a\"\r\n    assert first_word(\"hi\") == \"hi\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "first-word-simplified"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru"
      ],
      "code": "def first_word(text: str) -> str:\r\n    \"\"\"\r\n        returns the first word in a given text.\r\n    \"\"\"\r\n    # your code here\r\n    return text[0:2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(first_word(\"Hello world\"))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert first_word(\"Hello world\") == \"Hello\"\r\n    assert first_word(\" a word \") == \"a\"\r\n    assert first_word(\"don't touch it\") == \"don't\"\r\n    assert first_word(\"greetings, friends\") == \"greetings\"\r\n    assert first_word(\"... and so on ...\") == \"and\"\r\n    assert first_word(\"hi\") == \"hi\"\r\n    assert first_word(\"Hello.World\") == \"Hello\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    You are given a string where you have to find its first word.\n</p>\n\n<p>\n    When solving a task pay attention to the following points:\n</p>\n<ul>\n    <li>There can be dots and commas in a string.</li>\n    <li>A string can start with a letter or, for example, a dot or space.</li>\n    <li>A word can contain an apostrophe and it's a part of a word.</li>\n    <li>The whole text can be represented with one word and that's it.</li>\n</ul>\n\n<!-- Explain input and output values -->\n<p>\n    <strong>Input: </strong> A string.\n</p>\n\n<p>\n    <strong>Output: </strong> A string. \n</p>\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">first_word(\"Hello world\") == \"Hello\"\nfirst_word(\"greetings, friends\") == \"greetings\"\n</pre>\n\n</div>\n<!-- Here you can explain how it can be used in development and what is usage of this. -->\n<!-- The section is optional -->\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    <i>the first word is a command in a command line</i>\n</p>\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p>\n    <strong>Precondition:</strong>\n    <i>the text can contain a-z A-Z , . ' </i>\n</p>\n",
      "title": "First Word",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 509,
      "initialCode": "def first_word(text: str) -> str:\r\n    \"\"\"\r\n        returns the first word in a given text.\r\n    \"\"\"\r\n    # your code here\r\n    return text[0:2]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(first_word(\"Hello world\"))\r\n    \r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert first_word(\"Hello world\") == \"Hello\"\r\n    assert first_word(\" a word \") == \"a\"\r\n    assert first_word(\"don't touch it\") == \"don't\"\r\n    assert first_word(\"greetings, friends\") == \"greetings\"\r\n    assert first_word(\"... and so on ...\") == \"and\"\r\n    assert first_word(\"hi\") == \"hi\"\r\n    assert first_word(\"Hello.World\") == \"Hello\"\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "first-word"
    },
    {
      "languages": [
        "en",
        "de",
        "el",
        "es",
        "fa",
        "fr",
        "hu",
        "it",
        "ja",
        "pl",
        "pt",
        "pt-br",
        "ru",
        "uk"
      ],
      "code": "def checkio(words: str) -> bool:\n    return True or False\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(\"Hello World hello\"))\n    \n    assert checkio(\"Hello World hello\") == True, \"Hello\"\n    assert checkio(\"He is 123 man\") == False, \"123 man\"\n    assert checkio(\"1 2 3 4\") == False, \"Digits\"\n    assert checkio(\"bla bla bla bla\") == True, \"Bla Bla\"\n    assert checkio(\"Hi\") == False, \"Hi\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "description": "<img class=\"for_info_only\" title=\"train\" src=\"https://py-static.checkio.org/media/task/media/81e1c7ba240c422e82d91dfb3e7a039d/train.png\" alt=\"train\" />\n\n<p>\n    Let's teach the Robots to distinguish words and numbers.\n</p>\n\n<p>\n    You are given a string with words and numbers separated by whitespaces (one space).\n    The words contains only letters.\n    You should check if the string contains three words in <strong>succession</strong>.\n    For example, the string \"start 5 <strong>one two three</strong> 7 end\" contains three words in succession.\n</p>\n\n<p>\n    <strong>Input: </strong> A string with words.\n</p>\n\n<p>\n    <strong>Output: </strong> The answer as a boolean.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n    <pre class=\"brush: python\">\ncheckio(\"Hello World hello\") == True\ncheckio(\"He is 123 man\") == False\ncheckio(\"1 2 3 4\") == False\ncheckio(\"bla bla bla bla\") == True\ncheckio(\"Hi\") == False\n</pre>\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    This teaches you how to work with strings and introduces some useful functions.\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    The input contains words and/or numbers. There are no mixed words (letters and digits combined).<br>\n    0 &lt; len(words) &lt; 100\n</p>\n",
      "title": "Three Words",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 275,
      "initialCode": "def checkio(words: str) -> bool:\n    return True or False\n\n#These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == '__main__':\n    print('Example:')\n    print(checkio(\"Hello World hello\"))\n    \n    assert checkio(\"Hello World hello\") == True, \"Hello\"\n    assert checkio(\"He is 123 man\") == False, \"123 man\"\n    assert checkio(\"1 2 3 4\") == False, \"Digits\"\n    assert checkio(\"bla bla bla bla\") == True, \"Bla Bla\"\n    assert checkio(\"Hi\") == False, \"Hi\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "three-words"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru"
      ],
      "code": "def bigger_price(limit: int, data: list) -> list:\n    \"\"\"\n        TOP most expensive goods\n    \"\"\"\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    from pprint import pprint\n    print('Example:')\n    pprint(bigger_price(2, [\n        {\"name\": \"bread\", \"price\": 100},\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"meat\", \"price\": 15},\n        {\"name\": \"water\", \"price\": 1}\n    ]))\n\n    # These \"asserts\" using for self-checking and not for auto-testing\n    assert bigger_price(2, [\n        {\"name\": \"bread\", \"price\": 100},\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"meat\", \"price\": 15},\n        {\"name\": \"water\", \"price\": 1}\n    ]) == [\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"bread\", \"price\": 100}\n    ], \"First\"\n\n    assert bigger_price(1, [\n        {\"name\": \"pen\", \"price\": 5},\n        {\"name\": \"whiteboard\", \"price\": 170}\n    ]) == [{\"name\": \"whiteboard\", \"price\": 170}], \"Second\"\n\n    print('Done! Looks like it is fine. Go and check it')\n",
      "description": "<p>\n    You have a table with all available goods in the store. The data is represented as a list of dicts\n</p>\n\n<p>\n    Your mission here is to find the TOP most expensive goods. The amount we are looking for will be given as a first argument and the whole data as the second one\n</p>\n\n\n<p>\n    <strong>Input: </strong> int and list of dicts. Each dicts has two keys \"name\" and \"price\"\n</p>\n\n\n<p>\n    <strong>Output: </strong> the same as the second Input argument.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">bigger_price(2, [\n    {\"name\": \"bread\", \"price\": 100},\n    {\"name\": \"wine\", \"price\": 138},\n    {\"name\": \"meat\", \"price\": 15},\n    {\"name\": \"water\", \"price\": 1}\n]) == [\n    {\"name\": \"wine\", \"price\": 138},\n    {\"name\": \"bread\", \"price\": 100}\n]\n\nbigger_price(1, [\n    {\"name\": \"pen\", \"price\": 5},\n    {\"name\": \"whiteboard\", \"price\": 170}\n]) == [{\"name\": \"whiteboard\", \"price\": 170}]\n</pre>\n\n</div>\n\n",
      "title": "Bigger Price",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 503,
      "initialCode": "def bigger_price(limit: int, data: list) -> list:\n    \"\"\"\n        TOP most expensive goods\n    \"\"\"\n    # your code here\n    return None\n\n\nif __name__ == '__main__':\n    from pprint import pprint\n    print('Example:')\n    pprint(bigger_price(2, [\n        {\"name\": \"bread\", \"price\": 100},\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"meat\", \"price\": 15},\n        {\"name\": \"water\", \"price\": 1}\n    ]))\n\n    # These \"asserts\" using for self-checking and not for auto-testing\n    assert bigger_price(2, [\n        {\"name\": \"bread\", \"price\": 100},\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"meat\", \"price\": 15},\n        {\"name\": \"water\", \"price\": 1}\n    ]) == [\n        {\"name\": \"wine\", \"price\": 138},\n        {\"name\": \"bread\", \"price\": 100}\n    ], \"First\"\n\n    assert bigger_price(1, [\n        {\"name\": \"pen\", \"price\": 5},\n        {\"name\": \"whiteboard\", \"price\": 170}\n    ]) == [{\"name\": \"whiteboard\", \"price\": 170}], \"Second\"\n\n    print('Done! Looks like it is fine. Go and check it')\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "bigger-price"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def popular_words(text: str, words: list) -> dict:\r\n    # your code here\r\n    return None\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(popular_words('''\r\nWhen I was One\r\nI had just begun\r\nWhen I was Two\r\nI was nearly new\r\n''', ['i', 'was', 'three', 'near']))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert popular_words('''\r\nWhen I was One\r\nI had just begun\r\nWhen I was Two\r\nI was nearly new\r\n''', ['i', 'was', 'three', 'near']) == {\r\n        'i': 4,\r\n        'was': 3,\r\n        'three': 0,\r\n        'near': 0\r\n    }\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "description": "<!-- Describe task in general -->\n\n<p>\n    In this mission your task is to determine the popularity of certain words in the text. \n</p>\n\n<p>\n    At the input of your function are given 2 arguments: the text and the array of words the popularity of which you need to determine. \n</p>\n\n<p>When solving this task pay attention to the following points:</p>\n\n<ul>\n    <li>The words should be sought in all registers. This means that if you need to find a word \"one\" then words like \"one\", \"One\", \"oNe\", \"ONE\" etc. will do.</li>\n    <li>The search words are always indicated in the lowercase.</li>\n    <li>If the word wasn\u2019t found even once, it has to be returned in the dictionary with  0 (zero) value.</li>\n</ul>\n\n\n<p>\n    <strong>Input: </strong> The text and the search words array.\n</p>\n\n<p>\n    <strong>Output: </strong> The dictionary where the search words are the keys and values are the number of times when those words are occurring in a given text. \n</p>\n\n\n\n<!-- Put some usage examples -->\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">popular_words('''\nWhen I was One\nI had just begun\nWhen I was Two\nI was nearly new\n''', ['i', 'was', 'three', 'near']) == {\n    'i': 4,\n    'was': 3,\n    'three': 0,\n    'near': 0\n}\n\n</pre>\n\n</div>\n\n<!-- Here you can explain some constraints for input-->\n<!-- The section is optional -->\n<p><strong>Precondition</strong>:<br>\n    The input text will consists of English letters in uppercase and lowercase and whitespaces.\n</p>\n",
      "title": "Popular Words",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 517,
      "initialCode": "def popular_words(text: str, words: list) -> dict:\r\n    # your code here\r\n    return None\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(\"Example:\")\r\n    print(popular_words('''\r\nWhen I was One\r\nI had just begun\r\nWhen I was Two\r\nI was nearly new\r\n''', ['i', 'was', 'three', 'near']))\r\n\r\n    # These \"asserts\" are used for self-checking and not for an auto-testing\r\n    assert popular_words('''\r\nWhen I was One\r\nI had just begun\r\nWhen I was Two\r\nI was nearly new\r\n''', ['i', 'was', 'three', 'near']) == {\r\n        'i': 4,\r\n        'was': 3,\r\n        'three': 0,\r\n        'near': 0\r\n    }\r\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "popular-words"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def between_markers(text: str, begin: str, end: str) -> str:\r\n    \"\"\"\r\n        returns substring between two given markers\r\n    \"\"\"\r\n    # your code here\r\n    return ''\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('Example:')\r\n    print(between_markers('What is >apple<', '>', '<'))\r\n\r\n    # These \"asserts\" are used for self-checking and not for testing\r\n    assert between_markers('What is >apple<', '>', '<') == \"apple\"\r\n    assert between_markers('What is [apple]', '[', ']') == \"apple\"\r\n    assert between_markers('What is ><', '>', '<') == \"\"\r\n    assert between_markers('>apple<', '>', '<') == \"apple\"\r\n    print('Wow, you are doing pretty good. Time to check it!')",
      "description": "<p>\n    You are given a string and two markers (the initial one and final). You have to find a substring enclosed between these two markers. But there are a few important conditions.\n</p>\n\n<p>This is a simplified version of the <a href=\"/mission/between-markers/\">Between Markers</a> mission.</p>\n\n<ul>\n\t<li>The initial and final markers are always different.</li>\n\t<li>The initial and final markers are always 1 char size.</li>\n\t<li>The initial and final markers always exist in a string and go one after another.</li>\n</ul>\n\n<p>\n    <strong>Input: </strong> Three arguments. All of them are strings. The second and third arguments are the initial and final markers.\n</p>\n\n<p>\n    <strong>Output: </strong> A string. \n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">between_markers('What is >apple<', '>', '<') == 'apple'\n</pre>\n\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    <i>For text parsing.</i>\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    <i>There can't be more than one final and one initial markers.</i>\n</p>\n",
      "title": "Between Markers (simplified)",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 627,
      "initialCode": "def between_markers(text: str, begin: str, end: str) -> str:\r\n    \"\"\"\r\n        returns substring between two given markers\r\n    \"\"\"\r\n    # your code here\r\n    return ''\r\n\r\n\r\nif __name__ == '__main__':\r\n    print('Example:')\r\n    print(between_markers('What is >apple<', '>', '<'))\r\n\r\n    # These \"asserts\" are used for self-checking and not for testing\r\n    assert between_markers('What is >apple<', '>', '<') == \"apple\"\r\n    assert between_markers('What is [apple]', '[', ']') == \"apple\"\r\n    assert between_markers('What is ><', '>', '<') == \"\"\r\n    assert between_markers('>apple<', '>', '<') == \"apple\"\r\n    print('Wow, you are doing pretty good. Time to check it!')",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "between-markers-simplified"
    },
    {
      "languages": [
        "en",
        "ja",
        "ru",
        "uk"
      ],
      "code": "def between_markers(text: str, begin: str, end: str) -> str:\n    \"\"\"\n        returns substring between two given markers\n    \"\"\"\n    # your code here\n    return ''\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(between_markers('What is >apple<', '>', '<'))\n\n    # These \"asserts\" are used for self-checking and not for testing\n    assert between_markers('What is >apple<', '>', '<') == \"apple\", \"One sym\"\n    assert between_markers(\"<head><title>My new site</title></head>\",\n                           \"<title>\", \"</title>\") == \"My new site\", \"HTML\"\n    assert between_markers('No[/b] hi', '[b]', '[/b]') == 'No', 'No opened'\n    assert between_markers('No [b]hi', '[b]', '[/b]') == 'hi', 'No close'\n    assert between_markers('No hi', '[b]', '[/b]') == 'No hi', 'No markers at all'\n    assert between_markers('No <hi>', '>', '<') == '', 'Wrong direction'\n    print('Wow, you are doing pretty good. Time to check it!')\n",
      "description": "<p>\n    You are given a string and two markers (the initial and final). You have to find a substring enclosed between these two markers. But there are a few important conditions:\n</p>\n\n<ul>\n\t<li>The initial and final markers are always different.</li>\n\t<li>If there is no initial marker, then the first character should be considered the beginning of a string.</li>\n\t<li>If there is no final marker, then the last character should be considered the ending of a string.</li>\n    <li>If the initial and final markers are missing then simply return the whole string.</li>\n\t<li>If the final marker comes before the initial marker, then return an empty string.</li>\n</ul>\n\n<p>\n    <strong>Input: </strong> Three arguments. All of them are strings. The second and third arguments are the initial and final markers.\n</p>\n\n<p>\n    <strong>Output: </strong> A string. \n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n\n<pre class=\"brush: python\">between_markers('What is >apple<', '>', '<') == 'apple'\nbetween_markers('No[/b] hi', '[b]', '[/b]') == 'No'\n</pre>\n\n</div>\n\n<p class=\"for_info_only\">\n    <strong>How it is used: </strong>\n    <i>for parsing texts</i>\n</p>\n\n<p>\n    <strong>Precondition:</strong>\n    <i>can't be more than one final marker and can't be more than one initial</i>\n</p>\n",
      "title": "Between Markers",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 508,
      "initialCode": "def between_markers(text: str, begin: str, end: str) -> str:\n    \"\"\"\n        returns substring between two given markers\n    \"\"\"\n    # your code here\n    return ''\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(between_markers('What is >apple<', '>', '<'))\n\n    # These \"asserts\" are used for self-checking and not for testing\n    assert between_markers('What is >apple<', '>', '<') == \"apple\", \"One sym\"\n    assert between_markers(\"<head><title>My new site</title></head>\",\n                           \"<title>\", \"</title>\") == \"My new site\", \"HTML\"\n    assert between_markers('No[/b] hi', '[b]', '[/b]') == 'No', 'No opened'\n    assert between_markers('No [b]hi', '[b]', '[/b]') == 'hi', 'No close'\n    assert between_markers('No hi', '[b]', '[/b]') == 'No hi', 'No markers at all'\n    assert between_markers('No <hi>', '>', '<') == '', 'Wrong direction'\n    print('Wow, you are doing pretty good. Time to check it!')\n",
      "stationId": "2",
      "stationName": "Elementary",
      "isSolved": false,
      "slug": "between-markers"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def is_stressful(subj):\r\n    \"\"\"\r\n        recoognise stressful subject\r\n    \"\"\"\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert is_stressful(\"Hi\") == False, \"First\"\r\n    assert is_stressful(\"I neeed HELP\") == True, \"Second\"\r\n    print('Done! Go Check it!')",
      "description": "<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/59ce692dcb1e480abc9cf269cab468ec/title.png\" style=\"max-height: 296px\">\n</div>\n\n<p class=\"for_info_only\"><i>Sofia has had a very stressful month and decided to take a vacation for a week. To avoid any stress during her vacation she wants to forward emails with a stressful subject line to Stephen.</i></p>\n\n<p>\n    The function should recognise if a subject line is stressful. A stressful subject line means that all letters are in uppercase, and/or ends by at least 3 exclamation marks, and/or contains at least one of the following \u201cred\u201d words: \"help\", \"asap\", \"urgent\". Any of those \"red\" words can be spelled in different ways - \"HELP\", \"help\", \"HeLp\", \"H!E!L!P!\", \"H-E-L-P\", even in a very loooong way \"HHHEEEEEEEEELLP\"\n</p>\n\n<p>\n    <strong>Input: </strong> Subject line as a string.\n</p>\n\n<p>\n    <strong>Output: </strong> Boolean. \n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\nis_stressful(\"Hi\") == False\nis_stressful(\"I neeed HELP\") == True\n</pre>\n</div>\n\n<p>\n    <strong>Precondition:</strong>\n    <i>Subject can be up to 100 letters</i>\n</p>\n",
      "title": "Stressful Subject",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 474,
      "initialCode": "def is_stressful(subj):\r\n    \"\"\"\r\n        recoognise stressful subject\r\n    \"\"\"\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert is_stressful(\"Hi\") == False, \"First\"\r\n    assert is_stressful(\"I neeed HELP\") == True, \"Second\"\r\n    print('Done! Go Check it!')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "stressful-subject"
    },
    {
      "languages": [
        "ru",
        "en"
      ],
      "code": "import sendgrid\nfrom sendgrid.helpers.mail import Mail\n\nAPI_KEY = 'Registrate your own key'\nSUBJECT = 'Welcome'\nBODY = 'Hi {}'\n\nsg = sendgrid.SendGridAPIClient(API_KEY)\n\ndef send_email(email, name):\n    pass\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    send_email('somebody@gmail.com', 'Some Body')\n    print('Done')\n",
      "description": "<p><i>To solve this mission you must use the <a href=\"https://py.checkio.org/projects/open/sendgrid/settings-api-key/\">SendGrid API Key</a> (<a href=\"https://py.checkio.org/projects/open/sendgrid/youtube-how-to-api/\">this video will explain</a> how to create your own API Key). Check out these <a href=\"https://py.checkio.org/projects/open/sendgrid/docs-mail/\">Python examples</a>.</i></p>\n\n<p>It all starts with your first email. Let\u2019s try to send one.</p>\n \n<p>Your mission is to create a function that sends a welcome email to a user. The function gets two arguments: email and the name of the user.</p>\n \n<p>Subject of the email should be \"Welcome\" and body simply \"Hi {name}\" ({name} should be replaced by a user's name)</p>\n\n<p>\n    <strong>Input: </strong> Two arguments: email and a username.\n</p>\n\n<p>\n    <strong>Output: </strong> None. You should send an email. You don\u2019t need to return anything.\n</p>\n\n<pre class=\"brush: python\">\nsend_email('a.lyabah@checkio.org', 'oduvan')\nsend_email('somebody@gmail.com', 'Some Body')\n</pre>\n",
      "title": "Welcome Email by SendGrid",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 478,
      "initialCode": "import sendgrid\nfrom sendgrid.helpers.mail import Mail\n\nAPI_KEY = 'Registrate your own key'\nSUBJECT = 'Welcome'\nBODY = 'Hi {}'\n\nsg = sendgrid.SendGridAPIClient(API_KEY)\n\ndef send_email(email, name):\n    pass\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    send_email('somebody@gmail.com', 'Some Body')\n    print('Done')\n",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "sendgrid-sendone"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "import sendgrid\r\n\r\nAPI_KEY = 'Registrate your own key'\r\n\r\nsg = sendgrid.SendGridAPIClient(API_KEY)\r\n\r\ndef best_country(str_date):\r\n    return 'UA'\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    print('Your best country in 2016-01-01 was ' + best_country('2016-01-01'))\r\n    print('Check your results')",
      "description": "<p><i>To solve this mission you must use the <a href=\"https://py.checkio.org/projects/open/sendgrid/settings-api-key/\">SendGrid API Key</a>. When you click \"Run\" you will see the results of using your API key with your data, but if you click \"Check\" your solution will be tested using our data.</i></p>\n\n<p>You should be able to operate with your statistical email data and SendGrid has a lot of APIs that provide information you may need.</p>\n \n<p>Your mission is to figure out which country opens your emails the most. You can use this information in order to focus on a specific segment.</p>\n\n<p>\n    <strong>Input:</strong> Day as a string in format 'YYYY-MM-DD'\n</p>\n\n<p>\n    <strong>Output:</strong> String, Two-digit country code of country that has more unique clicks.\n</p>\n\n<p>\n    <strong>Example:</strong>\n</p>\n\n<pre class=\"brush: python\">\nbest_country('2016-01-01') == 'UA'\n</pre>\n",
      "title": "SendGrid Geo Stats",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 482,
      "initialCode": "import sendgrid\r\n\r\nAPI_KEY = 'Registrate your own key'\r\n\r\nsg = sendgrid.SendGridAPIClient(API_KEY)\r\n\r\ndef best_country(str_date):\r\n    return 'UA'\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    print('Your best country in 2016-01-01 was ' + best_country('2016-01-01'))\r\n    print('Check your results')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "sendgrid-geo-stats"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def disconnected_users(net, users, source, crushes):\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['B', 'C'],\r\n        ['C', 'D']\r\n    ], {\r\n        'A': 10,\r\n        'B': 20,\r\n        'C': 30,\r\n        'D': 40\r\n    },\r\n        'A', ['C']) == 70, \"First\"\r\n\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['B', 'D'],\r\n        ['A', 'C'],\r\n        ['C', 'D']\r\n    ], {\r\n        'A': 10,\r\n        'B': 0,\r\n        'C': 0,\r\n        'D': 40\r\n    },\r\n        'A', ['B']) == 0, \"Second\"\r\n\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['A', 'C'],\r\n        ['A', 'D'],\r\n        ['A', 'E'],\r\n        ['A', 'F']\r\n    ], {\r\n        'A': 10,\r\n        'B': 10,\r\n        'C': 10,\r\n        'D': 10,\r\n        'E': 10,\r\n        'F': 10\r\n    },\r\n        'C', ['A']) == 50, \"Third\"\r\n\r\n    print('Done. Try to check now. There are a lot of other tests')",
      "description": "<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/856915a43ad64d2ca04c28c441d8b6b6/title.png\" style=\"max-height: 294px\">\n</div>\n\n<p>Welcome to the GridLand. All the citizens here are connected through the global internal network because the main way for communication here is via email. Every new district of the city starts with building a node \u2013 center of the district. All citizens are connected to this node in order to send and receive emails. All nodes of GridLand are connected so one node can send emails between the connected nodes. In such a way, no matter how big the city is all users can send messages to each other as long as all of the nodes are connected.</p>\n \n<p>The Mayor of GridLand is using this network to quickly send emergency emails to all citizens when necessary. But the system is not perfect. When one of city nodes gets crushed it may leave the citizens of this node district disconnected from these emergency emails. It may also leave districts around the crushed node disconnected if their nodes do not have other ways to connect. To resolve this occurrence, the Mayor uses mail-pigeons \u2013 an old method of sending mail that was invented before the global internal network. All of the citizens still connected to the network receive the emergency emails, but the disconnected citizens receive their messages from these pigeons.</p>\n \n<p>Your mission is to figure out how many pigeons you need when some of the nodes are crushed.</p>\n\n</p>\n\n<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/856915a43ad64d2ca04c28c441d8b6b6/example.png\" style=\"max-height: 302px\">\n</div>\n\n<p>\n    <strong>Input: </strong> Four arguments: network structure (as a list of connections between the nodes), users of each node (as dict where keys are the node-names and values are the amounts of users), name of the node that sends email, and the list of crashed nodes.\n</p>\n\n<p>\n    <strong>Output: </strong> Int. The amount of users that won't receive an email.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n\n<pre class=\"brush: python\">\ndisconnected_users([\n    ['A', 'B'],\n    ['B', 'C'],\n    ['C', 'D']\n], {\n    'A': 10,\n    'B': 20,\n    'C': 30,\n    'D': 40\n},\n    'A', ['C']) == 70\n\ndisconnected_users([\n    ['A', 'B'],\n    ['B', 'D'],\n    ['A', 'C'],\n    ['C', 'D']\n], {\n    'A': 10,\n    'B': 0,\n    'C': 0,\n    'D': 40\n},\n    'A', ['B']) == 0\n\ndisconnected_users([\n    ['A', 'B'],\n    ['A', 'C'],\n    ['A', 'D'],\n    ['A', 'E'],\n    ['A', 'F']\n], {\n    'A': 10,\n    'B': 10,\n    'C': 10,\n    'D': 10,\n    'E': 10,\n    'F': 10\n},\n    'C', ['A']) == 50\n\n</pre>\n\n</div>\n",
      "title": "Node Disconnected Users",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 476,
      "initialCode": "def disconnected_users(net, users, source, crushes):\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['B', 'C'],\r\n        ['C', 'D']\r\n    ], {\r\n        'A': 10,\r\n        'B': 20,\r\n        'C': 30,\r\n        'D': 40\r\n    },\r\n        'A', ['C']) == 70, \"First\"\r\n\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['B', 'D'],\r\n        ['A', 'C'],\r\n        ['C', 'D']\r\n    ], {\r\n        'A': 10,\r\n        'B': 0,\r\n        'C': 0,\r\n        'D': 40\r\n    },\r\n        'A', ['B']) == 0, \"Second\"\r\n\r\n    assert disconnected_users([\r\n        ['A', 'B'],\r\n        ['A', 'C'],\r\n        ['A', 'D'],\r\n        ['A', 'E'],\r\n        ['A', 'F']\r\n    ], {\r\n        'A': 10,\r\n        'B': 10,\r\n        'C': 10,\r\n        'D': 10,\r\n        'E': 10,\r\n        'F': 10\r\n    },\r\n        'C', ['A']) == 50, \"Third\"\r\n\r\n    print('Done. Try to check now. There are a lot of other tests')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "node-disconnected-users2"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def subnetworks(net, crushes):\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ], ['B']) == 2, \"First\"\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['A', 'C'],\r\n            ['A', 'D'],\r\n            ['D', 'F']\r\n        ], ['A']) == 3, \"Second\"\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ], ['C', 'D']) == 1, \"Third\"\r\n    print('Done! Check button is waiting for you!')",
      "description": "<p>\n    Sometimes damaged nodes are unrecoverable. In that case, people that were connected to the crushed node must migrate to another district while administration attempts to fix the node.</p>\n \n<p>But if a crushed node disconnects multiple districts from one another, then the network splits into two sub-networks and every sub-network should have their own Mayor. And Mayors must use pigeons for mailing between each other. In that case, when the network is split you don\u2019t need hundreds of pigeons.</p>\n \n<p>Your mission is to figure out how many Mayors you need to control the entire city when some nodes are crushed. In other words, you need to figure out how many sub-networks will be formed after some nodes are crush and not recovered.</p>\n</p>\n\n\n<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/5d8b680383864c0c8cb10aa5afc70bca/example.png\" style=\"max-height: 302px\">\n</div>\n\n<p>\n    <strong>Input: </strong> Two arguments: the network structure (as a list of connections between the nodes) and the list of crashed nodes.\n</p>\n\n<p>\n    <strong>Output: </strong> Int. The amount of sub-networks formed after some nodes were crushed.\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\nsubnetworks([\n        ['A', 'B'],\n        ['B', 'C'],\n        ['C', 'D']\n    ], ['B']) == 2\nsubnetworks([\n        ['A', 'B'],\n        ['A', 'C'],\n        ['A', 'D'],\n        ['D', 'F']\n    ], ['A']) == 3\nsubnetworks([\n        ['A', 'B'],\n        ['B', 'C'],\n        ['C', 'D']\n    ], ['C', 'D']) == 1\n</pre>\n</div>\n",
      "title": "New Cities",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 477,
      "initialCode": "def subnetworks(net, crushes):\r\n    return 0\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ], ['B']) == 2, \"First\"\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['A', 'C'],\r\n            ['A', 'D'],\r\n            ['D', 'F']\r\n        ], ['A']) == 3, \"Second\"\r\n    assert subnetworks([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ], ['C', 'D']) == 1, \"Third\"\r\n    print('Done! Check button is waiting for you!')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "node-subnetworks"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "import sendgrid\r\n\r\nAPI_KEY = 'Registrate your own key'\r\n\r\nsg = sendgrid.SendGridAPIClient(API_KEY)\r\n\r\ndef how_spammed(str_date):\r\n    return 1\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    print('You had {} spam reports in 2016-01-01'.format(how_spammed('2016-01-01')))\r\n    print('Check your results')",
      "description": "<p><i>To solve this mission you must use the <a href=\"https://py.checkio.org/projects/open/sendgrid/settings-api-key/\">SendGrid API Key</a>. When you click \"Run\" you will see the results of using your API key with your data, but if you click \"Check\" your solution will be tested using our data.</i></p>\n\n<p>You are massively sending thousands and thousands emails every day, meanwhile experimenting with subject lines and the message itself. <a href=\"https://py.checkio.org/projects/open/sendgrid/main/\">SendGrid</a> allows you to see statistics of your spam reports.</p>\n\n<p>Your mission is to figure out how many spam reports you receive on a specific day.</p>\n\n<p>\n    <strong>Input: </strong> Day as a string in format 'YYYY-MM-DD'\n</p>\n\n<p>\n    <strong>Output: </strong> Int. The amount of spam reports\n</p>\n\n\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\nhow_spammed('2014-5-5') == 16\n</pre>\n</div>\n",
      "title": "SendGrid Spam Reports",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 481,
      "initialCode": "import sendgrid\r\n\r\nAPI_KEY = 'Registrate your own key'\r\n\r\nsg = sendgrid.SendGridAPIClient(API_KEY)\r\n\r\ndef how_spammed(str_date):\r\n    return 1\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    print('You had {} spam reports in 2016-01-01'.format(how_spammed('2016-01-01')))\r\n    print('Check your results')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "sendgrid-daily-spam"
    },
    {
      "languages": [
        "en",
        "ru"
      ],
      "code": "def most_crucial(net, users):\r\n    return ['B']\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['B', 'C']\r\n        ],{\r\n            'A': 10,\r\n            'B': 10,\r\n            'C': 10\r\n        }) == ['B'], 'First'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B']\r\n        ],{\r\n            'A': 20,\r\n            'B': 10\r\n        }) == ['A'], 'Second'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['A', 'C'],\r\n            ['A', 'D'],\r\n            ['A', 'E']\r\n        ],{\r\n            'A': 0,\r\n            'B': 10,\r\n            'C': 10,\r\n            'D': 10,\r\n            'E': 10\r\n        }) == ['A'], 'Third'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ],{\r\n            'A': 10,\r\n            'B': 20,\r\n            'C': 10,\r\n            'D': 20\r\n        }) == ['B'], 'Forth'\r\n\r\n    print('Nobody expected that, but you did it! It is time to share it!')",
      "description": "<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/65f32cbe77a54923b2607d69c89d4028/title.png\" style=\"max-height: 337px\">\n</div>\n\n<p>\n    Citizens of GridLand are sending emails to each other all the time. They send everything - what they just ate, a funny picture, questions or thoughts that are bothering them right now. All the citizens are happy because they have such a wonderful network that keeps them connected.</p>\n \n<p>The main goal of the Mayor is to control the city's happiness. The city's happiness is a sum of all citizens' happiness. And the happiness of each citizen is equal to the number of citizens (always including oneself) that one can send emails to.</p>\n \n<p>Because the city is growing, the citizens have decided that the Mayor needs an assistant to focus on the node protection.</p>\n \n<p>Your mission is to figure out what will be the first nodes to investigate and protect for the new assistant. Remember, you should choose the most important node in the network. If several nodes have the maximal importance, find all of them</p>\n\n\n<div class=\"for_info_only\" style=\"text-align: center\">\n    <img src=\"https://py-static.checkio.org/media/task/media/65f32cbe77a54923b2607d69c89d4028/example.png\" style=\"max-height: 711px\">\n</div>\n\n\n<p>\n    <strong>Input: </strong> Two arguments: the network structure (as a list of connections between the nodes), users on each node (as dict where keys are the node-names and values are the amounts of users).\n\n</p>\n\n<p>\n    <strong>Output: </strong> List of the most cru\u0441ial nodes.\n</p>\n\n<div class=\"for_info_only\">\n    <p>\n        <strong>Example:</strong>\n    </p>\n<pre class=\"brush: python\">\nmost_crucial([\n    ['A', 'B'],\n    ['B', 'C']\n],{\n    'A': 10,\n    'B': 10,\n    'C': 10\n}) == ['B']\n\nmost_crucial([\n    ['A', 'B']\n],{\n    'A': 20,\n    'B': 10\n}) == ['A']\n\nmost_crucial([\n    ['A', 'B'],\n    ['A', 'C'],\n    ['A', 'D'],\n    ['A', 'E']\n],{\n    'A': 0,\n    'B': 10,\n    'C': 10,\n    'D': 10,\n    'E': 10\n}) == ['A']\n\nmost_crucial([\n    ['A', 'B'],\n    ['B', 'C'],\n    ['C', 'D']\n],{\n    'A': 10,\n    'B': 20,\n    'C': 10,\n    'D': 20\n}) == ['B']\n</pre>\n</div>\n\n",
      "title": "City's Happiness",
      "secondsPast": null,
      "isPublished": false,
      "isStarted": false,
      "id": 479,
      "initialCode": "def most_crucial(net, users):\r\n    return ['B']\r\n\r\nif __name__ == '__main__':\r\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['B', 'C']\r\n        ],{\r\n            'A': 10,\r\n            'B': 10,\r\n            'C': 10\r\n        }) == ['B'], 'First'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B']\r\n        ],{\r\n            'A': 20,\r\n            'B': 10\r\n        }) == ['A'], 'Second'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['A', 'C'],\r\n            ['A', 'D'],\r\n            ['A', 'E']\r\n        ],{\r\n            'A': 0,\r\n            'B': 10,\r\n            'C': 10,\r\n            'D': 10,\r\n            'E': 10\r\n        }) == ['A'], 'Third'\r\n\r\n    assert most_crucial([\r\n            ['A', 'B'],\r\n            ['B', 'C'],\r\n            ['C', 'D']\r\n        ],{\r\n            'A': 10,\r\n            'B': 20,\r\n            'C': 10,\r\n            'D': 20\r\n        }) == ['B'], 'Forth'\r\n\r\n    print('Nobody expected that, but you did it! It is time to share it!')",
      "stationId": "32",
      "stationName": "SendGrid",
      "isSolved": false,
      "slug": "node-crucial"
    }
  ]
}