buildscript {
    ext.pythonPluginVersion = pythonPluginVersion
    ext.pycharmSandbox = project.buildDir.absolutePath + File.separator + "pycharm-sandbox"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.4-2"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.16" apply false
    id "java"
    id "idea"
}


group = 'org.jetbrains.edu'
version = pluginVersion

allprojects {
    apply plugin: "org.jetbrains.intellij"
    apply plugin: "java"
    apply plugin: "kotlin"


    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    intellij {
        if (project.hasProperty("ideaVersion")) {
            version ideaVersion
        } else if (project.hasProperty("ideaPath")) {
            localPath ideaPath
        }
    }

    // see https://youtrack.jetbrains.com/issue/KT-19737
    compileKotlin.destinationDir = compileJava.destinationDir

    dependencies {
        compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.1'
    }
}



intellij {
    if (project.hasProperty("ideaVersion")) {
        version ideaVersion
    } else if (project.hasProperty("ideaPath")) {
        localPath ideaPath
    }
    if (project.hasProperty("customSinceBuild")) {
        patchPluginXml.sinceBuild = customSinceBuild
    }
    updateSinceUntilBuild true
    downloadSources false
    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion"
}

task configurePyCharmTask {
    doLast {
        if (!project.hasProperty("pycharmPath")) {
            throw new InvalidUserDataException("Path to PyCharm installed locally is needed\nDefine \"pycharmPath\" property")
        }
        intellij.sandboxDirectory pycharmSandbox
        intellij.alternativeIdePath pycharmPath
    }
}

task copyXmls(type:Copy) {
    def resultingMetaInf = "${sourceSets.main.output.resourcesDir}/META-INF"

    for (def subProject : project.subprojects) {
        from "${subProject.name}/resources/META-INF"
        into resultingMetaInf
        include "*.xml"
    }
}

jar.dependsOn(copyXmls)

task removePyCharm(type: Delete) {
    doLast {
        file(pycharmSandbox + File.separator + "plugins" + File.separator + "python-ce").deleteDir()
    }
}

// task for running pycharm with plugins locally
task runPyCharm {
    dependsOn configurePyCharmTask
    dependsOn runIde
}

// we need this so as not to install python plugin on PyCharm
prepareSandbox.finalizedBy(removePyCharm)

subprojects {
    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDirs 'resources'
            kotlin.srcDirs 'src'
        }

        test {
            java.srcDirs 'testSrc'
            resources.srcDirs 'resources', 'testResources'

        }
    }

    project.tasks.getByPath("runIde").enabled false
    project.tasks.getByPath("prepareSandbox").enabled false
}

sourceSets {
    main {
        resources.srcDirs 'resources'
    }
}

configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin')]) {
    dependencies {
        compile project(':educational-core')
    }
}

configure([project(':educational-core'), project(':Edu-Java')]) {
    intellij.plugins 'junit'
}

configure(project(':Edu-Kotlin')) {
    intellij.plugins 'junit', 'Kotlin'
}

configure(project(':Edu-Python')) {
    intellij.plugins "PythonCore:$pythonPluginVersion"
}

runIde.systemProperty("-Didea.is.internal", "true")
runIde.systemProperty("-ea", "")

dependencies {
    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java')
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
        vcs = 'Git'
    }
}
